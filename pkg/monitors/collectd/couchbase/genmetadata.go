// Code generated by monitor-code-gen. DO NOT EDIT.

package couchbase

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/couchbase"

const (
	groupBucket  = "bucket"
	groupNodes   = "nodes"
	groupStorage = "storage"
)

var groupSet = map[string]bool{
	groupBucket:  true,
	groupNodes:   true,
	groupStorage: true,
}

const (
	gaugeBucketBasicDataUsed                = "gauge.bucket.basic.dataUsed"
	gaugeBucketBasicDiskFetches             = "gauge.bucket.basic.diskFetches"
	gaugeBucketBasicDiskUsed                = "gauge.bucket.basic.diskUsed"
	gaugeBucketBasicItemCount               = "gauge.bucket.basic.itemCount"
	gaugeBucketBasicMemUsed                 = "gauge.bucket.basic.memUsed"
	gaugeBucketBasicOpsPerSec               = "gauge.bucket.basic.opsPerSec"
	gaugeBucketBasicQuotaPercentUsed        = "gauge.bucket.basic.quotaPercentUsed"
	gaugeBucketOpCmdGet                     = "gauge.bucket.op.cmd_get"
	gaugeBucketOpCouchDocsFragmentation     = "gauge.bucket.op.couch_docs_fragmentation"
	gaugeBucketOpCouchViewsOps              = "gauge.bucket.op.couch_views_ops"
	gaugeBucketOpCurrConnections            = "gauge.bucket.op.curr_connections"
	gaugeBucketOpCurrItems                  = "gauge.bucket.op.curr_items"
	gaugeBucketOpDiskWriteQueue             = "gauge.bucket.op.disk_write_queue"
	gaugeBucketOpEpBgFetched                = "gauge.bucket.op.ep_bg_fetched"
	gaugeBucketOpEpCacheMissRate            = "gauge.bucket.op.ep_cache_miss_rate"
	gaugeBucketOpEpDiskqueueDrain           = "gauge.bucket.op.ep_diskqueue_drain"
	gaugeBucketOpEpDiskqueueFill            = "gauge.bucket.op.ep_diskqueue_fill"
	gaugeBucketOpEpMemHighWat               = "gauge.bucket.op.ep_mem_high_wat"
	gaugeBucketOpEpMemLowWat                = "gauge.bucket.op.ep_mem_low_wat"
	gaugeBucketOpEpNumValueEjects           = "gauge.bucket.op.ep_num_value_ejects"
	gaugeBucketOpEpOomErrors                = "gauge.bucket.op.ep_oom_errors"
	gaugeBucketOpEpQueueSize                = "gauge.bucket.op.ep_queue_size"
	gaugeBucketOpEpTmpOomErrors             = "gauge.bucket.op.ep_tmp_oom_errors"
	gaugeBucketOpMemUsed                    = "gauge.bucket.op.mem_used"
	gaugeBucketOpOps                        = "gauge.bucket.op.ops"
	gaugeBucketOpVbActiveResidentItemsRatio = "gauge.bucket.op.vb_active_resident_items_ratio"
	gaugeBucketQuotaRAM                     = "gauge.bucket.quota.ram"
	gaugeBucketQuotaRawRAM                  = "gauge.bucket.quota.rawRAM"
	gaugeNodesCmdGet                        = "gauge.nodes.cmd_get"
	gaugeNodesCouchDocsActualDiskSize       = "gauge.nodes.couch_docs_actual_disk_size"
	gaugeNodesCouchDocsDataSize             = "gauge.nodes.couch_docs_data_size"
	gaugeNodesCouchSpatialDataSize          = "gauge.nodes.couch_spatial_data_size"
	gaugeNodesCouchSpatialDiskSize          = "gauge.nodes.couch_spatial_disk_size"
	gaugeNodesCouchViewsActualDiskSize      = "gauge.nodes.couch_views_actual_disk_size"
	gaugeNodesCouchViewsDataSize            = "gauge.nodes.couch_views_data_size"
	gaugeNodesCurrItems                     = "gauge.nodes.curr_items"
	gaugeNodesCurrItemsTot                  = "gauge.nodes.curr_items_tot"
	gaugeNodesEpBgFetched                   = "gauge.nodes.ep_bg_fetched"
	gaugeNodesGetHits                       = "gauge.nodes.get_hits"
	gaugeNodesMcdMemoryAllocated            = "gauge.nodes.mcdMemoryAllocated"
	gaugeNodesMcdMemoryReserved             = "gauge.nodes.mcdMemoryReserved"
	gaugeNodesMemUsed                       = "gauge.nodes.mem_used"
	gaugeNodesMemoryFree                    = "gauge.nodes.memoryFree"
	gaugeNodesMemoryTotal                   = "gauge.nodes.memoryTotal"
	gaugeNodesOps                           = "gauge.nodes.ops"
	gaugeNodesSystemCPUUtilizationRate      = "gauge.nodes.system.cpu_utilization_rate"
	gaugeNodesSystemMemFree                 = "gauge.nodes.system.mem_free"
	gaugeNodesSystemMemTotal                = "gauge.nodes.system.mem_total"
	gaugeNodesSystemSwapTotal               = "gauge.nodes.system.swap_total"
	gaugeNodesSystemSwapUsed                = "gauge.nodes.system.swap_used"
	gaugeNodesVbReplicaCurrItems            = "gauge.nodes.vb_replica_curr_items"
	gaugeStorageHddFree                     = "gauge.storage.hdd.free"
	gaugeStorageHddQuotaTotal               = "gauge.storage.hdd.quotaTotal"
	gaugeStorageHddTotal                    = "gauge.storage.hdd.total"
	gaugeStorageHddUsed                     = "gauge.storage.hdd.used"
	gaugeStorageHddUsedByData               = "gauge.storage.hdd.usedByData"
	gaugeStorageRAMQuotaTotal               = "gauge.storage.ram.quotaTotal"
	gaugeStorageRAMQuotaTotalPerNode        = "gauge.storage.ram.quotaTotalPerNode"
	gaugeStorageRAMQuotaUsed                = "gauge.storage.ram.quotaUsed"
	gaugeStorageRAMQuotaUsedPerNode         = "gauge.storage.ram.quotaUsedPerNode"
	gaugeStorageRAMTotal                    = "gauge.storage.ram.total"
	gaugeStorageRAMUsed                     = "gauge.storage.ram.used"
	gaugeStorageRAMUsedByData               = "gauge.storage.ram.usedByData"
)

var metricSet = map[string]monitors.MetricInfo{
	gaugeBucketBasicDataUsed:                {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketBasicDiskFetches:             {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketBasicDiskUsed:                {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketBasicItemCount:               {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketBasicMemUsed:                 {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketBasicOpsPerSec:               {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketBasicQuotaPercentUsed:        {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpCmdGet:                     {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpCouchDocsFragmentation:     {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpCouchViewsOps:              {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpCurrConnections:            {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpCurrItems:                  {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpDiskWriteQueue:             {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpEpBgFetched:                {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpEpCacheMissRate:            {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpEpDiskqueueDrain:           {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpEpDiskqueueFill:            {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpEpMemHighWat:               {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpEpMemLowWat:                {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpEpNumValueEjects:           {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpEpOomErrors:                {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpEpQueueSize:                {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpEpTmpOomErrors:             {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpMemUsed:                    {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpOps:                        {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketOpVbActiveResidentItemsRatio: {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketQuotaRAM:                     {Type: datapoint.Gauge, Group: groupBucket},
	gaugeBucketQuotaRawRAM:                  {Type: datapoint.Gauge, Group: groupBucket},
	gaugeNodesCmdGet:                        {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesCouchDocsActualDiskSize:       {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesCouchDocsDataSize:             {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesCouchSpatialDataSize:          {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesCouchSpatialDiskSize:          {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesCouchViewsActualDiskSize:      {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesCouchViewsDataSize:            {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesCurrItems:                     {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesCurrItemsTot:                  {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesEpBgFetched:                   {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesGetHits:                       {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesMcdMemoryAllocated:            {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesMcdMemoryReserved:             {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesMemUsed:                       {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesMemoryFree:                    {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesMemoryTotal:                   {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesOps:                           {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesSystemCPUUtilizationRate:      {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesSystemMemFree:                 {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesSystemMemTotal:                {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesSystemSwapTotal:               {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesSystemSwapUsed:                {Type: datapoint.Gauge, Group: groupNodes},
	gaugeNodesVbReplicaCurrItems:            {Type: datapoint.Gauge, Group: groupNodes},
	gaugeStorageHddFree:                     {Type: datapoint.Gauge, Group: groupStorage},
	gaugeStorageHddQuotaTotal:               {Type: datapoint.Gauge, Group: groupStorage},
	gaugeStorageHddTotal:                    {Type: datapoint.Gauge, Group: groupStorage},
	gaugeStorageHddUsed:                     {Type: datapoint.Gauge, Group: groupStorage},
	gaugeStorageHddUsedByData:               {Type: datapoint.Gauge, Group: groupStorage},
	gaugeStorageRAMQuotaTotal:               {Type: datapoint.Gauge, Group: groupStorage},
	gaugeStorageRAMQuotaTotalPerNode:        {Type: datapoint.Gauge, Group: groupStorage},
	gaugeStorageRAMQuotaUsed:                {Type: datapoint.Gauge, Group: groupStorage},
	gaugeStorageRAMQuotaUsedPerNode:         {Type: datapoint.Gauge, Group: groupStorage},
	gaugeStorageRAMTotal:                    {Type: datapoint.Gauge, Group: groupStorage},
	gaugeStorageRAMUsed:                     {Type: datapoint.Gauge, Group: groupStorage},
	gaugeStorageRAMUsedByData:               {Type: datapoint.Gauge, Group: groupStorage},
}

var defaultMetrics = map[string]bool{
	gaugeBucketBasicDiskUsed:                true,
	gaugeBucketBasicItemCount:               true,
	gaugeBucketBasicOpsPerSec:               true,
	gaugeBucketBasicQuotaPercentUsed:        true,
	gaugeBucketOpCmdGet:                     true,
	gaugeBucketOpCouchDocsFragmentation:     true,
	gaugeBucketOpCouchViewsOps:              true,
	gaugeBucketOpCurrConnections:            true,
	gaugeBucketOpEpBgFetched:                true,
	gaugeBucketOpEpCacheMissRate:            true,
	gaugeBucketOpEpDiskqueueDrain:           true,
	gaugeBucketOpEpDiskqueueFill:            true,
	gaugeBucketOpEpMemHighWat:               true,
	gaugeBucketOpEpNumValueEjects:           true,
	gaugeBucketOpEpOomErrors:                true,
	gaugeBucketOpEpQueueSize:                true,
	gaugeBucketOpEpTmpOomErrors:             true,
	gaugeBucketOpMemUsed:                    true,
	gaugeBucketOpVbActiveResidentItemsRatio: true,
	gaugeNodesCmdGet:                        true,
	gaugeNodesCouchDocsActualDiskSize:       true,
	gaugeNodesCouchDocsDataSize:             true,
	gaugeNodesCurrItemsTot:                  true,
	gaugeNodesEpBgFetched:                   true,
	gaugeNodesMemUsed:                       true,
	gaugeNodesOps:                           true,
	gaugeNodesSystemCPUUtilizationRate:      true,
	gaugeNodesSystemMemFree:                 true,
	gaugeNodesSystemMemTotal:                true,
	gaugeNodesSystemSwapTotal:               true,
	gaugeNodesSystemSwapUsed:                true,
}

var groupMetricsMap = map[string][]string{
	groupBucket: []string{
		gaugeBucketBasicDataUsed,
		gaugeBucketBasicDiskFetches,
		gaugeBucketBasicDiskUsed,
		gaugeBucketBasicItemCount,
		gaugeBucketBasicMemUsed,
		gaugeBucketBasicOpsPerSec,
		gaugeBucketBasicQuotaPercentUsed,
		gaugeBucketOpCmdGet,
		gaugeBucketOpCouchDocsFragmentation,
		gaugeBucketOpCouchViewsOps,
		gaugeBucketOpCurrConnections,
		gaugeBucketOpCurrItems,
		gaugeBucketOpDiskWriteQueue,
		gaugeBucketOpEpBgFetched,
		gaugeBucketOpEpCacheMissRate,
		gaugeBucketOpEpDiskqueueDrain,
		gaugeBucketOpEpDiskqueueFill,
		gaugeBucketOpEpMemHighWat,
		gaugeBucketOpEpMemLowWat,
		gaugeBucketOpEpNumValueEjects,
		gaugeBucketOpEpOomErrors,
		gaugeBucketOpEpQueueSize,
		gaugeBucketOpEpTmpOomErrors,
		gaugeBucketOpMemUsed,
		gaugeBucketOpOps,
		gaugeBucketOpVbActiveResidentItemsRatio,
		gaugeBucketQuotaRAM,
		gaugeBucketQuotaRawRAM,
	},
	groupNodes: []string{
		gaugeNodesCmdGet,
		gaugeNodesCouchDocsActualDiskSize,
		gaugeNodesCouchDocsDataSize,
		gaugeNodesCouchSpatialDataSize,
		gaugeNodesCouchSpatialDiskSize,
		gaugeNodesCouchViewsActualDiskSize,
		gaugeNodesCouchViewsDataSize,
		gaugeNodesCurrItems,
		gaugeNodesCurrItemsTot,
		gaugeNodesEpBgFetched,
		gaugeNodesGetHits,
		gaugeNodesMcdMemoryAllocated,
		gaugeNodesMcdMemoryReserved,
		gaugeNodesMemUsed,
		gaugeNodesMemoryFree,
		gaugeNodesMemoryTotal,
		gaugeNodesOps,
		gaugeNodesSystemCPUUtilizationRate,
		gaugeNodesSystemMemFree,
		gaugeNodesSystemMemTotal,
		gaugeNodesSystemSwapTotal,
		gaugeNodesSystemSwapUsed,
		gaugeNodesVbReplicaCurrItems,
	},
	groupStorage: []string{
		gaugeStorageHddFree,
		gaugeStorageHddQuotaTotal,
		gaugeStorageHddTotal,
		gaugeStorageHddUsed,
		gaugeStorageHddUsedByData,
		gaugeStorageRAMQuotaTotal,
		gaugeStorageRAMQuotaTotalPerNode,
		gaugeStorageRAMQuotaUsed,
		gaugeStorageRAMQuotaUsedPerNode,
		gaugeStorageRAMTotal,
		gaugeStorageRAMUsed,
		gaugeStorageRAMUsedByData,
	},
}

var monitorMetadata = monitors.Metadata{
	MonitorType:     "collectd/couchbase",
	DefaultMetrics:  defaultMetrics,
	Metrics:         metricSet,
	SendUnknown:     false,
	Groups:          groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll:         false,
}
