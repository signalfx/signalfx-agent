// Code generated by monitor-code-gen. DO NOT EDIT.

package {{.goPackage}}

import (
{{if .metrics}}
	"github.com/signalfx/golib/datapoint"
{{- end}}
	"github.com/signalfx/signalfx-agent/internal/monitors"
)

{{if (len .monitors) eq 1 }}
const monitorType = "{{(index .monitors 0).MonitorType}}"
{{end}}

{{with .groupMetricsMap}}
const (
{{- range $group, $metrics := . }}
	{{(printf "group.%s" $group) | formatVariable}} = "{{$group}}"
{{- end}}
)
{{end}}

var groupSet = map[string]bool {
{{- range $group, $metrics := .groupMetricsMap}}
	{{(printf "group.%s" $group) | formatVariable}}: true,
{{- end}}
}

{{with .metrics}}
const (
{{- range $metric, $info := .}}
	{{$metric | formatVariable}} = "{{$metric}}"
{{- with $info.Alias}}
	{{. | formatVariable}} = "{{.}}"
{{- end}}
{{- end}}
)
{{end}}

var metricSet = map[string]monitors.MetricInfo {
{{- range $metric, $info := .metrics}}
	{{$metric | formatVariable}}: {Type: {{$info.Type | convertMetricType}}},
{{- end}}
}

var includedMetrics = map[string]bool {
{{- range $metric, $info := .metrics}}
{{- if $info.Included}}
	{{$metric | formatVariable}}: true,
{{- with $info.Alias}}
	{{. | formatVariable}}: true,
{{- end}}
{{- end}}
{{- end}}
}

var groupMetricsMap = map[string][]string {
{{- range $group, $metrics := .groupMetricsMap}}
	{{(printf "group.%s" $group) | formatVariable}}: []string {
		{{- range $metrics}}
		{{. | formatVariable}},
		{{- end}}
	},
{{- end}}
}

{{range .monitors}}
var {{if gt (len $.monitors) 1 -}}
{{- (printf "%s.%s" .MonitorType "monitorMetadata") | formatVariable -}}
{{else -}}
monitorMetadata{{end}} = monitors.Metadata{
	MonitorType: "{{.MonitorType}}",
	IncludedMetrics: includedMetrics,
	Metrics: metricSet,
	MetricsExhaustive: {{.MetricsExhaustive}},
	Groups: groupSet,
	GroupMetricsMap: groupMetricsMap,
	SendAll: {{ .SendAll }},
}
{{end}}
