<!--- GENERATED BY gomplate from scripts/docs/top-config.md.tmpl --->
{{define "configTable"}}
{{ $doc_types := (ds "agent").doc_types -}}
| Config option | Required | Type | Description |
| --- | --- | --- | --- |
{{ range . -}}
| `{{.yamlName}}` |
{{- ` `}}{{if .required}}**yes**{{else}}no{{end}} |
{{- ` `}}{{if has . "elementStruct"}}[{{end}}{{or (index $doc_types .type) .type}}{{if (eq .type "struct") }} (see below){{end}}{{if .elementKind}} of {{or (index $doc_types .elementKind) .elementKind}}{{if ne .elementKind "interface"}}s{{end}}{{if (eq .elementKind "struct") and (ne .elementKind "interface")}} (see below){{end}}{{end}}{{if has . "elementStruct"}}](#{{.yamlName | toLower}}){{end}} |
{{- ` `}}{{ .doc | strings.TrimSpace}}{{if (and (.default | print) (not (eq "<nil>" (.default | print))))}} (**default:** `{{.default | data.ToJSON}}`){{end}} |
{{end}}

{{ range . -}}
{{ if (has . "elementStruct") -}}
## {{.yamlName}}
The **nested** `{{.yamlName}}` config object has the following fields:

{{ if eq .yamlName "monitors" -}}
The following are generic options that apply to all monitors.  Each monitor type has its own set of additional configuration options, detailed in [Monitor Config](./monitor-config.md).
{{- end -}}
{{ if eq .yamlName "observers" -}}
The following are generic options that apply to all observers.  Each observer type has its own set of additional configuration options, detailed in [Observer Config](./observer-config.md).
{{- end -}}
{{ if eq .yamlName "configSources" -}}
For more information about how to use config sources, see [Remote Config](./remote-config.md).
{{- end -}}
{{ if eq .yamlName "metricsToExclude" -}}
For more information on filtering see [Datapoint Filtering](./filtering.md).
{{end }}
{{ template "configTable" .elementStruct.fields }}
{{end -}}

{{end}}

{{- end -}}


# Agent Configuration

The agent is configured primarily by a YAML document conventionally located at
`/etc/signalfx/agent.yaml`.  The location of the config file can be specified
by the `-config` flag to the agent binary (`signalfx-agent`).

## Configuring your endpoint

By default, the Smart Agent will send data to the `us0` realm.
If you are not in this realm, you will need to explicitly set the
`signalFxRealm` option in your config like this:

```
signalFxRealm: YOUR_SIGNALFX_REALM
```

To determine if you are in a different realm and need to
explicitly set the endpoints, check your profile page in the SignalFx
web application.

If you want to explicitly set the ingest, API server, and trace endpoint URLs,
you can set them individually like so:

```
ingestUrl: "https://ingest.YOUR_SIGNALFX_REALM.signalfx.com"
apiUrl: "https://api.YOUR_SIGNALFX_REALM.signalfx.com"
traceEndpointUrl: "https://ingest.YOUR_SIGNALFX_REALM.signalfx.com/v1/trace"
```

They will default to the endpoints for the realm configured in `signalFxRealm`
if not set.


## Config Schema
{{ with (ds "agent").TopConfig }}
{{template "configTable" .fields }}
{{end -}}

## Example YAML

Here is an autogenerated example of a YAML config file, with default values
where applicable:
{{define "yamlOption" -}}
{{ $field := (index . 0) -}}
{{ $indent := conv.ToInt (index . 1) -}}
{{ $field.yamlName | strings.Indent $indent "  " }}: {{template "yamlValue" (slice $field $indent)}}
{{- end -}}

{{define "yamlValue" -}}
{{ $field := (index . 0) -}}
{{ $indent := (index . 1) -}}
{{if eq $field.type "struct" -}}
{{range $field.elementStruct.fields}}
{{template "yamlOption" (slice . (add 1 $indent))}}
{{- end -}}
{{- else if eq $field.type "slice" -}}
[]
{{- /* If it's nil we don't print any value. Don't know of any other way to test for nil. */ -}}
{{- else if eq ($field.default | conv.ToString) "nil" -}}
{{- else if $field.default | print -}}
{{$field.default | data.ToJSON}}
{{- end -}}
{{- end }}

```yaml
{{ range (ds "agent").TopConfig.fields -}}
{{template "yamlOption" (slice . 1)}}
{{end}}
```
