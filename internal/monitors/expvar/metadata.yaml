monitors:
- dimensions: null
  doc: |
    The expvar monitor is a SignalFx Smart Agent monitor that scrapes metrics from variables exposed in JSON
    format at an HTTP endpoint by [expvar](https://golang.org/pkg/expvar/). The monitor uses configured paths
    to get metric and dimension values from fetched JSON objects.

    The Metrics section in this document shows metrics derived from expvar variable
    [memstats](https://golang.org/pkg/runtime/). The memstat variable is exposed by default. These memstat
    metrics are referred to as standard or default metrics. The configuration examples shown are excerpts
    limited to the monitor configuration section of the SignalFx Smart Agent configuration file `agent.yml`.

    Below is an example showing the minimal required expvar monitor configuration for exporting
    the default metrics from endpoint `http://172.17.0.3:8000/debug/vars`. `/debug/vars` is the default path.
    ```
    monitors:
    - type: expvar
      host: 172.17.0.3
      path: /debug/vars
      port: 8000
    ```
    We recommend you include the extra dimension `metric_source` with a meaningful value in order to facilitate
    filtering in the SignalFx app. See below.
    ```
    monitors:
    - type: expvar
      host: 172.17.0.3
      path: /debug/vars
      port: 8000
      extraDimensions:
        metric_source: expvar
    ```
    Below is an example showing part of a JSON payload containing the exposed variable requestsPerSecond containing
    requests per second metric information.
    ```
    {
      ...
      "requestsPerSecond": 919,
      ...
    }
    ```
    Suppose that the payload is emanating from endpoint `http://172.17.0.4:6000/appmetrics`. The monitor can be
    configured as shown below in order to scrape requestsPerSecond. The metric name is optional. If not provided,
    the JSONPath value `requestsPerSecond` snake cased to `requests_per_second` will be used instead.
    ```
    monitors:
    - type: expvar
      host: 172.17.0.4
      path: /debug/vars
      port: 6000
      metrics:
        - name: requests.sec
          JSONPath: requestsPerSecond
          type: gauge
      extraDimensions:
        metric_source: expvar-aws
    ```
    The expvar monitor can be configured to extract metric values from complex JSON objects such as the one shown
    below. Suppose the `memstats` variable shown below is exposed at endpoint `http://172.17.0.5:5000/debug/vars`
    and you want to extract the cumulative `Mallocs` values.
    ```
    {
      ...
      "memstats": {
                    ...
                    "GCCPUFraction": 0.0000032707490586459204,
                    "BySize": [
                      {
                          "Size": 32,
                          "Mallocs": 35387,
                          "Frees": 35021
                      },
                      {
                          "Size": 48,
                          "Mallocs": 35387,
                          "Frees": 63283
                      }
                    ]
                    "HeapAlloc": 2138088,
                    ...
                  }
      ...
    }
    ```
    The should be configured as shown below so as to fetch the `Mallocs` values. The JSONPath is what maps the
    location of values with the JSON object. The path must terminate primitive values or an array containing
    primitive values. It cannot terminated on embedded object(s).
    ```
    monitors:
    - type: expvar
      host: 172.12.0.5
      path: /debug/vars
      port: 5000
      metrics:
        - JSONPath: memstats.BySize.Mallocs
          type: cumulative
      extraDimensions:
        metric_source: expvar
    ```
    No metric name was provided for this configuration so the metric name defaults to memstats.by_size.mallocs.
    Because memstats.BySize is an array of size 2 there are 2 values for memstats.BySize.Mallocs (35387 and 35387).
    Two data points are created for metric memstats.by_size.mallocs for the 2 values. Additionaly, a dimension
    name memstats.by_size containing array index created for each respective datapoint.

    Also, custom dimensions can be added to metric as shown below. The dimension name required if a dimension
    value is provided whereas it is optional when a JSONPath is provided instead.
    ```
    monitors:
    - type: expvar
      host: 172.12.0.5
      path: /debug/vars
      port: 5000
      metrics:
        - JSONPath: memstats.BySize.Mallocs
          type: cumulative
          - dimensions:
            name: physical_memory
            value: 4GiB
          - name: app_mem
            value: "10 MiB"
      extraDimensions:
        metric_source: expvar
    ```
    A dimension JSONPath is configured as shown below. The monitor gets JSON key at the specified path as the
    dimension value. The dimension name is optional if the dimension JSONPath is specified. When not provided
    the monitor snake cases the dimension JSONPath and uses that for the dimension name. The dimension JSONPath
    must be shorter than the metric JSONPath and have the same root.
    ```
    monitors:
    - type: expvar
      host: 172.12.0.5
      path: /debug/vars
      port: 5000
      metrics:
        - JSONPath: memstats.BySize.Mallocs
          type: cumulative
          - dimensions:
            JSONPath: memstats
          - dimensions:
            name: by_size_index
            JSONPath: memstats.BySize
      extraDimensions:
        metric_source: expvar
    ```
    DO NOT configure the monitor for memstats metrics because they are standard metrics provided by default.
    memstats was used to provide a realistic example.

  metrics:
  - name: memstats.alloc
    type: gauge
    description: Bytes of allocated heap objects. Same as memstats.heap_alloc
    included: false
  - name: memstats.heap_alloc
    type: gauge
    description: Bytes of allocated heap objects
    included: true
  - name: memstats.heap_sys
    type: gauge
    description: Bytes of heap memory obtained from the OS
    included: false
  - name: memstats.heap_idle
    type: gauge
    description: Bytes in idle (unused) spans
    included: true
  - name: memstats.heap_inuse
    type: gauge
    description: Bytes in in-use spans
    included: true
  - name: memstats.heap_released
    type: gauge
    description: Bytes of physical memory returned to the OS
    included: true
  - name: memstats.heap_objects
    type: gauge
    description: Number of allocated heap objects
    included: true
  - name: memstats.stack_inuse
    type: gauge
    description: Bytes in stack spans
    included: true
  - name: memstats.stack_sys
    type: gauge
    description: Bytes of stack memory obtained from the OS
    included: true
  - name: memstats.m_span_inuse
    type: gauge
    description: Bytes of allocated mspan structures
    included: true
  - name: memstats.m_span_sys
    type: gauge
    description: Bytes of memory obtained from the OS for mspan
    included: true
  - name: memstats.m_cache_inuse
    type: gauge
    description: Bytes of allocated mcache structures
    included: true
  - name: memstats.m_cache_sys
    type: gauge
    description: Bytes of memory obtained from the OS for mcache structures
    included: true
  - name: memstats.buck_hash_sys
    type: gauge
    description: Bytes of memory in profiling bucket hash tables
    included: true
  - name: memstats.gc_sys
    type: gauge
    description: Bytes of memory in garbage collection metadata
    included: true
  - name: memstats.other_sys
    type: gauge
    description: Bytes of memory in miscellaneous off-heap runtime allocations
    included: true
  - name: memstats.sys
    type: gauge
    description: total bytes of memory obtained from the OS
    included: true
  - name: memstats.next_gc
    type: gauge
    description: Target heap size of the next GC cycle
    included: true
  - name: memstats.last_gc
    type: gauge
    description: The time the last garbage collection finished, as nanoseconds since 1970 (the UNIX epoch)
    included: true
  - name: memstats.gccpu_fraction
    type: gauge
    description: The fraction of this program's available CPU time used by the GC since the program started
    included: true
  - name: memstats.enable_gc
    type: gauge
    description: Boolean that indicates that GC is enabled. It is always true, even if GOGC=off
    included: true
  - name: memstats.debug_gc
    type: gauge
    description: memstats.debug_gc is currently unused
    included: false
  - name: memstats.most_recent_gc_pause_ns
    type: gauge
    description: Most recent GC stop-the-world pause time in nanoseconds
    included: true
  - name: memstats.most_recent_gc_pause_end
    type: gauge
    description: Most recent GC pause end time, as nanoseconds since 1970 (the UNIX epoch)
    included: true
  - name: memstats.total_alloc
    type: counter
    description: Cumulative bytes allocated for heap objects
    included: true
  - name: memstats.lookups
    type: counter
    description: Number of pointer lookups performed by the runtime
    included: true
  - name: memstats.mallocs
    type: counter
    description: Cumulative count of heap objects allocated
    included: true
  - name: memstats.frees
    type: counter
    description: Cumulative count of heap objects freed
    included: true
  - name: memstats.pause_total_ns
    type: counter
    description: Cumulative nanoseconds in GC stop-the-world pauses since the program started
    included: true
  - name: memstats.num_gc
    type: counter
    description: Number of completed GC cycles
    included: true
  - name: memstats.num_forced_gc
    type: counter
    description: Number of GC cycles that were forced by the application calling the GC function
    included: true
  - name: memstats.by_size.size
    type: counter
    description: The maximum byte size of a class as identified by dimension class. It is the class interval upper limit. The values of dimension class are numbers between 0 and 60 inclusive. Consecutive classes are of consecutive dimension class values. The lower limit of a class is the upper limit of the consecutive class below. Metrics memstats.by_size.size, memstats.by_size.mallocs and memstats.by_size.frees of the same class are related
    included: false
  - name: memstats.by_size.mallocs
    type: counter
    description: Cumulative count of heap objects allocated in a class. The class is identified by dimension class and it is as described for metric memstats.by_size.size
    included: false
  - name: memstats.by_size.frees
    type: counter
    description: Cumulative count of heap objects freed in a class. The class is identified by dimension class and it is as described for metric memstats.by_size.size
    included: false
  monitorType: expvar
  properties: null
