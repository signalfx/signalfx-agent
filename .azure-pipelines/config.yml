resources:
- repo: self

trigger:
  branches:
    include:
    - master
  tags:
    include:
    - v*

pr:
  autoCancel: true
  branches:
    include:
    - '*'
      
variables:
  AGENT_BIN: '$(Build.SourcesDirectory)\build\SignalFxAgent\bin\signalfx-agent.exe'
  GO111MODULE: 'on'
  GOPATH: '$(Pipeline.Workspace)/go'
  GOBIN: '$(GOPATH)/bin'
  SANIC_NO_UVLOOP: 'true'
  TEST_SERVICES_DIR: '$(Build.SourcesDirectory)\test-services'
  GOVERSION: "1.14.2"
  GOMOD_HASH: ""
  GOSUM_HASH: ""

jobs:
- job: 'go_lint'
  pool:
    vmImage: 'ubuntu-16.04'
  container: golang:$(GOVERSION)
  steps:
  - template: 'templates/restore-go-cache.yml'
  - script: |
      set -euo pipefail

      lintver="1.23.8"
      curl -sfL https://github.com/golangci/golangci-lint/releases/download/v${lintver}/golangci-lint-${lintver}-linux-amd64.tar.gz > /tmp/golangci-lint.tar.gz
      tar -xf /tmp/golangci-lint.tar.gz -C /tmp
      chmod +x /tmp/golangci-lint-${lintver}-linux-amd64/golangci-lint
      lintbin="/tmp/golangci-lint-${lintver}-linux-amd64/golangci-lint"

      go generate ./...

      echo 'Linting LINUX code'
      CGO_ENABLED=0 GOGC=40 $lintbin run --deadline 5m

      echo 'Linting WINDOWS code'
      GOOS=windows CGO_ENABLED=0 GOGC=40 $lintbin run --deadline 5m

- job: 'win_go_build'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - template: 'templates/install-go.yml'
    parameters:
      version: $(GOVERSION)
  - powershell: |
      if ("$(Build.SourceBranch)" -match "^refs/tags/v\d+\.\d+\.\d+$") {
          $env:AGENT_VERSION = ("$(Build.SourceBranchName)").Replace("v", "")
      } else {
          $env:AGENT_VERSION = "$(Build.SourceVersion)"
      }
      & ./scripts/windows/make.ps1 signalfx-agent -AGENT_VERSION "$env:AGENT_VERSION"
    displayName: 'Run go build'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'signalfx-agent.exe'
      artifactName: 'exe'

- job: 'win_go_test'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - template: 'templates/install-go.yml'
    parameters:
      version: $(GOVERSION)
      packages: 'gotest.tools/gotestsum'
  - powershell: |
      & ./scripts/windows/make.ps1 unit_test
    displayName: 'Run go test'
  - task: PublishTestResults@2
    inputs:
      searchFolder: '$(Build.SourcesDirectory)'
      testResultsFormat: 'JUnit'
      testResultsFiles: 'unit_results.xml'
      failTaskOnFailedTests: true
    condition: succeededOrFailed()

- job: 'go_test_race'
  pool:
    vmImage: 'ubuntu-16.04'
  container: golang:$(GOVERSION)
  steps:
  - template: 'templates/restore-go-cache.yml'
  - script: |
      cd /tmp
      go get gotest.tools/gotestsum
    displayName: 'Install gotestsum'
  - script: |
      export PATH=$GOBIN:$PATH
      go generate ./...
      CGO_ENABLED=1 gotestsum --format short-verbose --junitfile unit_results.xml --raw-command -- go test -race --json ./...
    displayName: 'Run go test'
  - task: PublishTestResults@2
    inputs:
      searchFolder: '$(Build.SourcesDirectory)'
      testResultsFormat: 'JUnit'
      testResultsFiles: 'unit_results.xml'
      failTaskOnFailedTests: true
    condition: succeededOrFailed()

- job: 'win_bundle_build'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - template: 'templates/install-go.yml'
    parameters:
      version: $(GOVERSION)
  - template: 'templates/install-choco.yml'
  - powershell: |
      choco install -y checksum
      choco install -y wixtoolset --version 3.11.2
      $env:PATH = "C:\ProgramData\chocolatey\bin;C:\Program Files (x86)\WiX Toolset v3.11\bin;$env:PATH"
      echo "##vso[task.setvariable variable=PATH]$env:PATH"
    displayName: 'Install msi dependencies'
  - powershell: |
      & ./scripts/windows/make.ps1 bundle -build_msi 1 -build_choco 1
    displayName: 'Build bundle, msi, and nupkg'
  - task: CopyFiles@2
    inputs:
      sourceFolder: 'build'
      contents: |
        SignalFxAgent-*-win64.zip
        SignalFxAgent-*-win64.msi
        signalfx-agent*.nupkg
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      cleanTargetFolder: true
      overWrite: true
      flattenFolders: true
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'bundle'

- job: 'win_2019_integration_tests'
  pool:
    vmImage: 'windows-2019'
  dependsOn: 'win_bundle_build'
  steps:
  - template: 'templates/extract-bundle.yml'
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: '(windows or windows_only) and not deployment and not installer'
      options: '-n4'
      # Install IIS for windows-iis integration test.
      chocoPackages: '--source windowsfeatures IIS-WebServerRole'

- job: 'win_2016_integration_tests'
  pool:
    vmImage: 'vs2017-win2016'
  dependsOn: 'win_bundle_build'
  steps:
  - template: 'templates/extract-bundle.yml'
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: '(windows or windows_only) and not deployment and not installer'
      options: '-n4'
      # Install IIS for windows-iis integration test.
      chocoPackages: '--source windowsfeatures IIS-WebServerRole'

- job: 'win_2019_chef_tests'
  pool:
    vmImage: 'windows-2019'
  steps:
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: 'chef and windows_only'
      changesInclude: 'deployments/chef tests/deployments/chef tests/packaging/common.py .azure-pipelines'

- job: 'win_2016_chef_tests'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: 'chef and windows_only'
      changesInclude: 'deployments/chef tests/deployments/chef tests/packaging/common.py .azure-pipelines'

- job: 'win_2019_puppet_tests'
  pool:
    vmImage: 'windows-2019'
  steps:
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: 'puppet and windows_only'
      changesInclude: 'deployments/puppet tests/deployments/puppet tests/packaging/common.py .azure-pipelines'

- job: 'win_2016_puppet_tests'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: 'puppet and windows_only'
      changesInclude: 'deployments/puppet tests/deployments/puppet tests/packaging/common.py .azure-pipelines'

- job: 'win_2019_installer_tests'
  pool:
    vmImage: 'windows-2019'
  dependsOn: 'win_bundle_build'
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: 'bundle'
      downloadPath: '$(Build.SourcesDirectory)'
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: 'installer and windows_only'
      changesInclude: 'deployments/installer tests/packaging scripts/windows .azure-pipelines'

- job: 'win_2016_installer_tests'
  pool:
    vmImage: 'vs2017-win2016'
  dependsOn: 'win_bundle_build'
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: 'bundle'
      downloadPath: '$(Build.SourcesDirectory)'
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: 'installer and windows_only'
      changesInclude: 'deployments/installer tests/packaging scripts/windows .azure-pipelines'

- job: 'perf_tests'
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DockerInstaller@0
    inputs:
      dockerVersion: 18.09.0
      releaseType: stable
  - task: GoTool@0
    inputs:
      version: $(GOVERSION)
      goPath: $(GOPATH)
      goBin: $(GOBIN)
  - template: 'templates/restore-go-cache.yml'
  - script: |
      export PATH=$GOBIN:$PATH
      make signalfx-agent
    displayName: 'Build agent'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8.5'
  - script: |
      python -m pip install --upgrade pip==20.0.2
      pip install -r tests/requirements.txt
    displayName: 'Install pytest'
  - script: |
      mkdir -p test_output
      AGENT_BIN=$(pwd)/signalfx-agent pytest -v -m perf_test --junitxml=test_output/test_results.xml --html=test_output/test_results.html --self-contained-html tests
    displayName: 'Run perf tests'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'test_output'
      artifactName: $(Agent.JobName)
  - task: PublishTestResults@2
    inputs:
      searchFolder: '$(Build.SourcesDirectory)'
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_output/*.xml'
      failTaskOnFailedTests: true
      publishRunAttachments: false
