<!--- GENERATED BY gomplate from scripts/docs/top-config.md.tmpl --->
{{define "configTable"}}
{{ $doc_types := (ds "agent").doc_types -}}
| Config option | Required | Type | Description |
| --- | --- | --- | --- |
{{ range . -}}
| `{{.yamlName}}` |
{{- ` `}}{{if .required}}**yes**{{else}}no{{end}} |
{{- ` `}}{{if has . "elementStruct"}}[{{end}}{{or (index $doc_types .type) .type}}{{if (eq .type "struct") }} (see below){{end}}{{if .elementKind}} of {{or (index $doc_types .elementKind) .elementKind}}{{if ne .elementKind "interface"}}s{{end}}{{if (eq .elementKind "struct") and (ne .elementKind "interface")}} (see below){{end}}{{end}}{{if has . "elementStruct"}}](#{{.yamlName | toLower}}){{end}} |
{{- ` `}}{{ .doc | strings.TrimSpace}}{{if .default | print}} (**default:** `{{.default | data.ToJSON}}`){{end}} |
{{end}}

{{ range . -}}
{{ if (has . "elementStruct") -}}
## {{.yamlName}}
The **nested** `{{.yamlName}}` config object has the following fields:

{{ if eq .yamlName "monitors" -}}
The following are generic options that apply to all monitors.  Each monitor type has its own set of additional configuration options, detailed in [Monitor Config](./monitor-config.md).
{{- end -}}
{{ if eq .yamlName "observers" -}}
The following are generic options that apply to all observers.  Each observer type has its own set of additional configuration options, detailed in [Observer Config](./observer-config.md).
{{- end -}}
{{ if eq .yamlName "configSources" -}}
For more information about how to use config sources, see [Remote Config](./remote-config.md).
{{- end -}}
{{ if eq .yamlName "metricsToExclude" -}}
For more information on filtering see [Datapoint Filtering](./filtering.md).
{{end }}
{{ template "configTable" .elementStruct.fields }}
{{end -}}

{{end}}

{{- end -}}


# Agent Configuration

The agent is configured primarily by a YAML document conventionally located at
`/etc/signalfx/agent.yaml`.  The location of the config file can be specified
by the `-config` flag to the agent binary (`signalfx-agent`).

## Config Schema
{{ with (ds "agent").TopConfig }}
  {{template "configTable" .fields }}
{{end -}}

## Example YAML

Here is an autogenerated example of a YAML config file, with default values
where applicable:
{{define "yamlOption" -}}
{{ $field := (index . 0) -}}
{{ $indent := conv.ToInt (index . 1) -}}
{{ $field.yamlName | strings.Indent $indent "  " }}: {{template "yamlValue" (slice $field $indent)}}
{{- end -}}

{{define "yamlValue" -}}
{{ $field := (index . 0) -}}
{{ $indent := (index . 1) -}}
{{if eq $field.type "struct" -}}
{{range $field.elementStruct.fields}}
{{template "yamlOption" (slice . (add 1 $indent))}}
{{- end -}}
{{- else if $field.default | print -}}
{{$field.default | data.ToJSON}}
{{- else if eq $field.type "slice" -}}
[]
{{- end -}}
{{- end }}

```yaml
{{ range (ds "agent").TopConfig.fields -}}
{{template "yamlOption" (slice . 1)}}
{{end}}
```
