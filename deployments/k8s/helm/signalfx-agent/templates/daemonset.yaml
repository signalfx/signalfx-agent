{{ if not .Values.isServerless -}}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ template "signalfx-agent.fullname" . }}
  namespace: {{ template "signalfx-agent.namespace" . }}
  labels:
    app: {{ template "signalfx-agent.name" . }}
    version: {{ .Values.agentVersion }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    chart: {{ template "signalfx-agent.chart" . }}
spec:
  selector:
    matchLabels:
      app: {{ template "signalfx-agent.name" . }}
      release: {{ .Release.Name }}
  updateStrategy:
    rollingUpdate:
      maxUnavailable: {{ .Values.rollingUpdateMaxUnavailable | default 1 }}
    type: RollingUpdate
  {{ with .Values.minReadySeconds -}}
  minReadySeconds: {{ . }}
  {{- end}}
  template:
    metadata:
      labels:
        app: {{ template "signalfx-agent.name" . }}
        version: {{ .Values.agentVersion }}
        release: {{ .Release.Name }}
        {{ with .Values.extraPodLabels -}}
        {{ toYaml . | indent 8 | trim }}
        {{- end }}
      annotations:
        {{- toYaml .Values.podAnnotations | trim | nindent 8 }}
    spec:
      # Use host network so we can access kubelet directly
      {{ if not .Values.isWindows -}}
      hostNetwork: true
      {{- end }}
      dnsPolicy: {{ .Values.isWindows | ternary "ClusterFirst" "ClusterFirstWithHostNet" }}
      {{- if .Values.dnsConfig }}
      dnsConfig:
      {{ toYaml .Values.dnsConfig | nindent 8 }}
      {{- end }}
      restartPolicy: Always
      serviceAccountName: {{ template "signalfx-agent.serviceAccountName" . }}
      {{ with .Values.image.pullSecret -}}
      imagePullSecrets:
      - name: {{ . }}
      {{- end }}
      nodeSelector:
        {{ if .Values.nodeSelector -}}
          {{ toYaml .Values.nodeSelector | indent 8 | trim }}
        {{- else -}}
          kubernetes.io/os: {{ .Values.isWindows | ternary "windows" "linux" }}
        {{- end}}
      tolerations:
      {{ if .Values.runOnMaster -}}
      - effect: NoSchedule
        key: node.alpha.kubernetes.io/role
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      {{- end }}
      {{ range .Values.tolerations -}}
      - {{ toYaml . | indent 8 | trim }}
      {{ end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      containers:
      - name: signalfx-agent
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Values.agentVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        {{ if .Values.isWindows -}}
        - 'C:\\SignalFxAgent\signalfx-agent.exe'
        - '-service'
        - 'bypass'
        {{ else -}}
        - /bin/signalfx-agent
        {{- end }}
        volumeMounts:
        - mountPath: {{ .Values.isWindows | ternary "C:\\ProgramData\\SignalFxAgent" "/etc/signalfx" }}
          name: config
        - mountPath: {{ .Values.hostFSPath }}
          name: hostfs
          readOnly: true
          mountPropagation: HostToContainer
        {{ if not .Values.isWindows -}}
        - mountPath: /var/run/docker.sock
          name: docker
          readOnly: true
        - mountPath: /etc/passwd
          name: etc-passwd
          readOnly: true
        {{- end }}
        resources:
          {{- toYaml .Values.resources | trim | nindent 10 }}
        env:
        - name: SFX_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ template "signalfx-agent.secretName" . }}
              key: access-token
        {{- if .Values.splunkUrl }}
        - name: SPLUNK_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ template "signalfx-agent.secretName" . }}
              key: splunk-token
        {{- end }}
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: MY_NODE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: MY_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
      {{- with .Values.extraEnv }}
        {{- toYaml . | trim | nindent 8 }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ include "configmap-name" . }}
      - name: hostfs
        hostPath:
          path: {{ .Values.isWindows | ternary "C:\\" "/" }}
      {{ if not .Values.isWindows -}}
      - name: docker
        hostPath:
          path: /var/run/docker.sock
      - name: etc-passwd
        hostPath:
          path: /etc/passwd
      {{- end }}
{{- end }}
