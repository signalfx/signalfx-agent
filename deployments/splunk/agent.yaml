intervalSeconds: 10

etcPath: /hostfs/etc
procPath: /hostfs/proc
runPath: /hostfs/run
varPath: /hostfs/var
sysPath: /hostfs/sys

logging:
  # Valid values are 'debug', 'info', 'warning', and 'error'
  level: info

# observers are what discover running services in the environment
observers:
  - type: docker

writer:
  traceExportFormat: sapm
  signalFxEnabled: false
  splunk:
    enabled: true
    url: ${SPLUNK_URL}
    token: ${SPLUNK_TOKEN}
    index: ${SPLUNK_INDEX}
    source: ${SPLUNK_SOURCE}
    eventsIndex: ${SPLUNK_EVENTS_INDEX}
    eventsSource: ${SPLUNK_EVENTS_SOURCE}
    skipTLSVerify: ${SPLUNK_SKIP_TLS_VERIFY}
monitors:
  - {"#from": "/etc/signalfx/monitors/*.yaml", flatten: true, optional: true}
  - type: cpu
  - type: filesystems
    hostFSPath: /hostfs
  - type: disk-io
  - type: net-io
  - type: load
  - type: memory
  - type: vmem
  - type: host-metadata
  - type: processlist
  - type: docker-container-stats
  - type: signalfx-forwarder
    listenAddress: 0.0.0.0:9080
    # Used to add a tag to spans missing it
    #defaultSpanTags:
     # Set the environment filter in SignalFx
     #environment: "YOUR_ENVIRONMENT"
    # Used to add and override a tag on a span
    #extraSpanTags:
     #SPAN_TAG_KEY: "SPAN_TAG_VALUE"
  - type: prometheus-exporter
    host: prometheus
    # Prometheus captures the counter metric on the go program we run independently.
    # We choose to run a separate Prometheus container to gather the metrics data, and read that data with SignalFx.
    # the match[] parameter is required. There can be multiple match[] parameters. Each match entry is a query against Prometheus.
    metricPath: '/federate?match[]=counter'
    port: 9090
    extraDimensions:
      metric_source: prometheus
