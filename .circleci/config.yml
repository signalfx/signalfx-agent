---
version: 2
references:
  goexecutor: &goexecutor
    working_directory: /go/src/github.com/signalfx/signalfx-agent
    docker:
      - image: golang:1.10-alpine
        environment:
          CGO_ENABLED: 0
          AGENT_BIN: /go/src/github.com/signalfx/signalfx-agent/signalfx-agent

  goexecutor_setup: &goexecutor_setup
    run: |
      apk add --no-cache curl make git bash coreutils

  executor: &executor
    machine:
      image: circleci/classic:201711-01

  attach_workspace: &attach_workspace
    attach_workspace:
      at: /tmp/workspace

  import_image: &import_image
    run: |
      docker load -i /tmp/workspace/image.tar

  install_pytest: &install_pytest
    run: |
      if [ -f ~/.skip ]; then
          echo "Found ~/.skip. Skipping pytest install."
          exit 0
      fi
      set -e
      pyenv install 3.6.3
      pyenv global 3.6.3
      if which pip; then
          pip install --upgrade 'pip==10.0.1'
      else
          curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          python get-pip.py 'pip==10.0.1'
      fi
      pip install -r tests/requirements.txt
      pyenv rehash

  run_k8s_integration_tests: &run_k8s_integration_tests
    run:
      no_output_timeout: 30m
      command: |
        mkdir ~/testresults
        mkdir -p /tmp/scratch
        pytest \
            -n4 \
            -m "$PYTEST_MARKERS" \
            --exitfirst \
            --verbose \
            --junitxml=~/testresults/k8s_integration_tests.xml \
            --html=~/testresults/k8s_integration_tests.html \
            --self-contained-html \
            --k8s-version="$K8S_VERSION" \
            --k8s-observers="$K8S_OBSERVERS" \
            --k8s-timeout=420 \
            --k8s-test-timeout=120 \
            --k8s-sfx-agent=quay.io/signalfx/signalfx-agent-dev:latest \
            tests

jobs:
  build:
    <<: *executor
    steps:
      - checkout
      - run: |
          set -x
          export PULL_CACHE=yes
          export AGENT_VERSION=latest
          make image
      - run: |
          mkdir -p /tmp/workspace
          docker save -o /tmp/workspace/image.tar quay.io/signalfx/signalfx-agent-dev:latest
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - image.tar

  build_dev_image:
    <<: *executor
    steps:
      - checkout
      - run: |
          set -x
          if ! scripts/changes-include-dir Dockerfile; then
              echo "Dockerfile has not changed, skipping build!"
              exit 0
          fi
          export PULL_CACHE=yes
          make dev-image

  lint: 
    <<: *goexecutor
    steps:
      - checkout
      - <<: *goexecutor_setup
      - run: |
          go get -u golang.org/x/lint/golint
          make lint

  vet:
    <<: *goexecutor
    steps:
      - checkout
      - <<: *goexecutor_setup
      - run: |
          make vet

  gotests:
    <<: *goexecutor
    steps:
      - checkout
      - <<: *goexecutor_setup
      - run: |
          mkdir ~/testresults
          go get github.com/tebeka/go2xunit
          bash -eo pipefail -c "make templates >/dev/null && go test -v ./... | tee /dev/stderr | go2xunit" > ~/testresults/unit.xml
      - store_test_results:
          path: ~/testresults

  docs_test:
    <<: *goexecutor
    steps:
      - checkout
      - <<: *goexecutor_setup
      - run: |
          apk add --no-cache jq
          curl -LOk https://github.com/hairyhenderson/gomplate/releases/download/v2.3.0/gomplate_linux-amd64-slim
          mv gomplate_linux-amd64-slim /usr/bin/gomplate
          chmod +x /usr/bin/gomplate
          make signalfx-agent
          bash -ec "make docs && git diff --exit-code" || \
          (echo 'Autogenerated docs and/or the selfdescribe.json file are not in sync with their source! If you directly edited a doc file, please move the changes to the source where the doc is generated from (use grep to find where based on existing doc content). In either case, you need to run `make docs` in the dev image and commit those changes.' && exit 1)

  integration_tests:
    <<: *executor
    steps:
      - *attach_workspace
      - *import_image
      - checkout
      - *install_pytest
      - run:
          no_output_timeout: 20m
          command: |
            mkdir ~/testresults
            mkdir -p /tmp/scratch
            mkdir bundle
            cid=$(docker create quay.io/signalfx/signalfx-agent-dev:latest true)
            docker export $cid | tar -C $(pwd)/bundle/ -xf -
            docker rm -fv $cid
            export AGENT_BIN=$(pwd)/bundle/bin/signalfx-agent
            export BUNDLE_DIR=$(pwd)/bundle
            export TEST_SERVICES_DIR=$(pwd)/test-services
            MARKERS="not packaging and not installer and not k8s and not windows-only"
            if ! scripts/changes-include-dir internal/monitors/collectd/openstack tests/monitors/openstack test-services/devstack; then
                MARKERS="$MARKERS and not openstack"
            fi
            sudo -E $PYENV_ROOT/shims/pytest \
                -n4 \
                -m "$MARKERS" \
                --verbose \
                --junitxml=~/testresults/integration_tests.xml \
                --html=~/testresults/integration_tests.html \
                --self-contained-html \
                tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/integration_tests.html

  k8s_v1.11.0_integration_tests:
    <<: *executor
    environment:
      K8S_VERSION: "v1.11.0"
      K8S_OBSERVERS: "k8s-api,k8s-kubelet"
      PYTEST_MARKERS: "k8s"
    steps:
      - *attach_workspace
      - *import_image
      - checkout
      - *install_pytest
      - *run_k8s_integration_tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  k8s_v1.10.0_integration_tests:
    <<: *executor
    environment:
      K8S_VERSION: "v1.10.0"
      K8S_OBSERVERS: "k8s-api,k8s-kubelet"
      PYTEST_MARKERS: "k8s"
    steps:
      - *attach_workspace
      - *import_image
      - checkout
      - *install_pytest
      - *run_k8s_integration_tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  k8s_v1.9.0_integration_tests:
    <<: *executor
    environment:
      K8S_VERSION: "v1.9.0"
      K8S_OBSERVERS: "k8s-api,k8s-kubelet"
      PYTEST_MARKERS: "k8s"
    steps:
      - *attach_workspace
      - *import_image
      - checkout
      - *install_pytest
      - *run_k8s_integration_tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  k8s_v1.8.0_integration_tests:
    <<: *executor
    environment:
      K8S_VERSION: "v1.8.0"
      K8S_OBSERVERS: "k8s-api,k8s-kubelet"
      PYTEST_MARKERS: "k8s"
    steps:
      - *attach_workspace
      - *import_image
      - checkout
      - *install_pytest
      - *run_k8s_integration_tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  k8s_v1.7.0_integration_tests:
    <<: *executor
    environment:
      K8S_VERSION: "v1.7.0"
      K8S_OBSERVERS: "k8s-api,k8s-kubelet"
      PYTEST_MARKERS: "k8s"
    steps:
      - *attach_workspace
      - *import_image
      - checkout
      - *install_pytest
      - *run_k8s_integration_tests
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/k8s_integration_tests.html

  pytest_lint:
    working_directory: /opt/signalfx-agent
    docker:
      - image: python:3.6
    steps:
      - checkout
      - run: |
          if ! scripts/changes-include-dir tests; then
              echo "Pytest code has not changed, skipping lint!"
              touch ~/.skip
              exit 0
          fi
          pip install --upgrade 'pip==10.0.1'
          pip install -r tests/requirements.txt
      - run: |
          if [ -f ~/.skip ]; then
              echo "Pytest code has not changed, skipping lint!"
              exit 0
          fi
          cd tests
          black --config pyproject.toml .
          pylint -j4 $(find . -maxdepth 1 -mindepth 1 -type d -o -name "*.py")
          git diff --exit-code || (echo 'Pytest file(s) need to be reformatted. Run `make lint-pytest` in the dev image and commit the changes.' && exit 1)

  python_lint:
    working_directory: /opt/signalfx-agent
    docker:
      - image: python:3.6
    steps:
      - checkout
      - run: |
          if ! scripts/changes-include-dir python; then
              echo "Python code has not changed, skipping lint!"
              touch ~/.skip
              exit 0
          fi
          pip install --upgrade 'pip==10.0.1'
          pip install -e python
          pip install -r python/test-requirements.txt
      - run: |
          if [ -f ~/.skip ]; then
              echo "Python code has not changed, skipping lint!"
              exit 0
          fi
          cd python
          black --config pyproject.toml .
          pylint -j4 $(find . -maxdepth 1 -mindepth 1 -type d -o -name "*.py")
          git diff --exit-code || (echo 'Python file(s) need to be reformatted. Run `make lint-python` in the dev image and commit the changes.' && exit 1)

  installer_tests:
    <<: *executor
    steps:
      - checkout
      - run: |
          if ! scripts/changes-include-dir deployments/installer tests/packaging/installer_test.py tests/packaging/common.py tests/packaging/images; then
              echo "Installer code has not changed, skipping tests!"
              touch ~/.skip
              exit 0
          fi
      - *install_pytest
      - run:
          no_output_timeout: 30m
          command: |
            if [ -f ~/.skip ]; then
                echo "Installer code has not changed, skipping tests!"
                exit 0
            fi
            mkdir /tmp/scratch
            mkdir ~/testresults
            pytest \
                -n auto \
                -m "installer" \
                --verbose \
                --junitxml=~/testresults/installer.xml \
                --html=~/testresults/installer.html \
                --self-contained-html \
                ./tests/packaging/
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/testresults/installer.html

  rpm_package_tests:
    <<: *executor
    steps:
      - checkout
      - run: |
          if ! scripts/changes-include-dir Dockerfile packaging/rpm tests/packaging; then
              echo "RPM packaging code has not changed, skipping tests!"
              touch ~/.skip
              exit 0
          fi
          export PULL_CACHE=yes
          make rpm-test-package
      - *install_pytest
      - run:
          no_output_timeout: 30m
          command: |
            if [ -f ~/.skip ]; then
                echo "RPM packaging code has not changed, skipping tests!"
                exit 0
            fi
            mkdir /tmp/scratch
            mkdir ~/testresults
            pytest \
                -n auto \
                -m "rpm" \
                --verbose \
                --junitxml=~/testresults/rpm.xml \
                --html=~/testresults/rpm.html \
                --self-contained-html \
                ./tests/packaging
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/project/packaging/rpm/output
          destination: /packages/
      - store_artifacts:
          path: ~/testresults/rpm.html

  deb_package_tests:
    <<: *executor
    steps:
      - checkout
      - run: |
          if ! scripts/changes-include-dir Dockerfile packaging/deb tests/packaging; then
              echo "Debian packaging code has not changed, skipping tests!"
              touch ~/.skip
              exit 0
          fi
          export PULL_CACHE=yes
          make deb-test-package
      - *install_pytest
      - run:
          no_output_timeout: 30m
          command: |
            if [ -f ~/.skip ]; then
                echo "Debian packaging code has not changed, skipping tests!"
                exit 0
            fi
            mkdir ~/testresults
            mkdir /tmp/scratch
            pytest \
                -n auto \
                -m "deb" \
                --verbose \
                --junitxml=~/testresults/deb.xml \
                --html=~/testresults/deb.html \
                --self-contained-html \
                ./tests/packaging
      - store_test_results:
          path: ~/testresults
      - store_artifacts:
          path: ~/project/packaging/deb/output
          destination: /packages/
      - store_artifacts:
          path: ~/testresults/deb.html

  chef_tests:
    <<: *executor
    steps:
      - checkout
      - run: |
          mkdir ~/testresults
          if ! scripts/changes-include-dir Dockerfile deployments/chef; then
              echo "Chef cookbook code has not changed, skipping tests!"
              exit 0
          fi
          cd deployments/chef
          make dev-image
          docker run --rm \
              signalfx-agent-chef-dev \
              chef exec rspec --format RspecJunitFormatter > ~/testresults/chefspec.xml
          docker run --rm \
              signalfx-agent-chef-dev \
              foodcritic .
      - store_test_results:
          path: ~/testresults

  puppet_tests:
    <<: *executor
    steps:
      - checkout
      - run: |
          mkdir ~/testresults
          if ! scripts/changes-include-dir Dockerfile deployments/puppet; then
              echo "Puppet module code has not changed, skipping tests!"
              exit 0
          fi
          cd deployments/puppet
          make dev-image
          docker run --rm \
              signalfx-agent-puppet-dev \
              rspec spec --format RspecJunitFormatter > ~/testresults/puppetspec.xml
          docker run --rm \
              signalfx-agent-puppet-dev \
              puppet-lint .
      - store_test_results:
          path: ~/testresults

  salt_tests:
    <<: *executor
    steps:
      - checkout
      - run: |
          mkdir ~/testresults
          if ! scripts/changes-include-dir Dockerfile deployments/salt; then
              echo "Salt module code has not changed, skipping tests!"
              exit 0
          fi
          cd deployments/salt
          make dev-image
          docker run --rm \
              signalfx-agent-salt-dev \
              salt '*' state.apply > ~/testresults/salt.out
      - store_test_results:
          path: ~/testresults

  ansible_tests:
    <<: *executor
    steps:
      - checkout
      - run: |
          mkdir ~/testresults
          if ! scripts/changes-include-dir Dockerfile deployments/ansible; then
              echo "Ansible playbook code has not changed, skipping tests!"
              exit 0
          fi
          cd deployments/ansible
          make dev-image
          docker run --rm \
              signalfx-agent-ansible-dev \
              ansible-playbook -i inventory example-playbook.yml --connection=local \
              -e '{"sfx_agent_config": {"signalFxAccessToken": "MyToken"}}' > ~/testresults/ansible.out
          docker run --rm \
              signalfx-agent-ansible-dev \
              ansible-lint .
      - store_test_results:
          path: ~/testresults

workflows:
  version: 2
  build_test:
    jobs:
      - build
      - build_dev_image
      - lint
      - vet
      - gotests
      - integration_tests:
          requires:
            - build
      - k8s_v1.11.0_integration_tests:
          requires:
            - build
      - k8s_v1.10.0_integration_tests:
          requires:
            - build
      - k8s_v1.9.0_integration_tests:
          requires:
            - build
      - k8s_v1.8.0_integration_tests:
          requires:
            - build
      - k8s_v1.7.0_integration_tests:
          requires:
            - build
      - docs_test
      - installer_tests
      - rpm_package_tests
      - deb_package_tests
      - chef_tests
      - puppet_tests
      - salt_tests
      - ansible_tests
      - pytest_lint
      - python_lint
