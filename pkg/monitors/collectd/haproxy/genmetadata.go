// Code generated by monitor-code-gen. DO NOT EDIT.

package haproxy

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/haproxy"

var groupSet = map[string]bool{}

const (
	counterConnectionTotal     = "counter.connection_total"
	counterServerSelectedTotal = "counter.server_selected_total"
	deriveBytesIn              = "derive.bytes_in"
	deriveBytesOut             = "derive.bytes_out"
	deriveCliAbrt              = "derive.cli_abrt"
	deriveCompByp              = "derive.comp_byp"
	deriveCompIn               = "derive.comp_in"
	deriveCompOut              = "derive.comp_out"
	deriveCompRsp              = "derive.comp_rsp"
	deriveCompressBpsIn        = "derive.compress_bps_in"
	deriveCompressBpsOut       = "derive.compress_bps_out"
	deriveConnections          = "derive.connections"
	deriveDeniedRequest        = "derive.denied_request"
	deriveDeniedResponse       = "derive.denied_response"
	deriveDowntime             = "derive.downtime"
	deriveErrorConnection      = "derive.error_connection"
	deriveErrorRequest         = "derive.error_request"
	deriveErrorResponse        = "derive.error_response"
	deriveFailedChecks         = "derive.failed_checks"
	deriveRedispatched         = "derive.redispatched"
	deriveRequestTotal         = "derive.request_total"
	deriveRequests             = "derive.requests"
	deriveResponse1xx          = "derive.response_1xx"
	deriveResponse2xx          = "derive.response_2xx"
	deriveResponse3xx          = "derive.response_3xx"
	deriveResponse4xx          = "derive.response_4xx"
	deriveResponse5xx          = "derive.response_5xx"
	deriveResponseOther        = "derive.response_other"
	deriveRetries              = "derive.retries"
	deriveSessionTotal         = "derive.session_total"
	deriveSrvAbrt              = "derive.srv_abrt"
	deriveSslCacheLookups      = "derive.ssl_cache_lookups"
	deriveSslCacheMisses       = "derive.ssl_cache_misses"
	deriveSslConnections       = "derive.ssl_connections"
	deriveUptimeSeconds        = "derive.uptime_seconds"
	gaugeActiveServers         = "gauge.active_servers"
	gaugeBackupServers         = "gauge.backup_servers"
	gaugeCheckDuration         = "gauge.check_duration"
	gaugeConnectionRate        = "gauge.connection_rate"
	gaugeConnectionRateMax     = "gauge.connection_rate_max"
	gaugeCurrentConnections    = "gauge.current_connections"
	gaugeCurrentSslConnections = "gauge.current_ssl_connections"
	gaugeDeniedTCPConnections  = "gauge.denied_tcp_connections"
	gaugeDeniedTCPSessions     = "gauge.denied_tcp_sessions"
	gaugeIdlePct               = "gauge.idle_pct"
	gaugeInterceptedRequests   = "gauge.intercepted_requests"
	gaugeLastSession           = "gauge.last_session"
	gaugeMaxConnectionRate     = "gauge.max_connection_rate"
	gaugeMaxConnections        = "gauge.max_connections"
	gaugeMaxPipes              = "gauge.max_pipes"
	gaugeMaxSessionRate        = "gauge.max_session_rate"
	gaugeMaxSslConnections     = "gauge.max_ssl_connections"
	gaugePipesFree             = "gauge.pipes_free"
	gaugePipesUsed             = "gauge.pipes_used"
	gaugeQueueCurrent          = "gauge.queue_current"
	gaugeQueueLimit            = "gauge.queue_limit"
	gaugeQueueMax              = "gauge.queue_max"
	gaugeQueueTimeAvg          = "gauge.queue_time_avg"
	gaugeRequestRate           = "gauge.request_rate"
	gaugeRequestRateMax        = "gauge.request_rate_max"
	gaugeResponseTimeAvg       = "gauge.response_time_avg"
	gaugeRunQueue              = "gauge.run_queue"
	gaugeSessionCurrent        = "gauge.session_current"
	gaugeSessionRate           = "gauge.session_rate"
	gaugeSessionRateAll        = "gauge.session_rate_all"
	gaugeSessionRateLimit      = "gauge.session_rate_limit"
	gaugeSessionRateMax        = "gauge.session_rate_max"
	gaugeSessionTimeAverage    = "gauge.session_time_average"
	gaugeSessionTimeAvg        = "gauge.session_time_avg"
	gaugeSslBackendKeyRate     = "gauge.ssl_backend_key_rate"
	gaugeSslFrontendKeyRate    = "gauge.ssl_frontend_key_rate"
	gaugeSslRate               = "gauge.ssl_rate"
	gaugeTasks                 = "gauge.tasks"
	gaugeThrottle              = "gauge.throttle"
	gaugeZlibMemUsage          = "gauge.zlib_mem_usage"
)

var metricSet = map[string]monitors.MetricInfo{
	counterConnectionTotal:     {Type: datapoint.Count},
	counterServerSelectedTotal: {Type: datapoint.Count},
	deriveBytesIn:              {Type: datapoint.Counter},
	deriveBytesOut:             {Type: datapoint.Counter},
	deriveCliAbrt:              {Type: datapoint.Counter},
	deriveCompByp:              {Type: datapoint.Counter},
	deriveCompIn:               {Type: datapoint.Counter},
	deriveCompOut:              {Type: datapoint.Counter},
	deriveCompRsp:              {Type: datapoint.Counter},
	deriveCompressBpsIn:        {Type: datapoint.Counter},
	deriveCompressBpsOut:       {Type: datapoint.Counter},
	deriveConnections:          {Type: datapoint.Counter},
	deriveDeniedRequest:        {Type: datapoint.Counter},
	deriveDeniedResponse:       {Type: datapoint.Counter},
	deriveDowntime:             {Type: datapoint.Counter},
	deriveErrorConnection:      {Type: datapoint.Counter},
	deriveErrorRequest:         {Type: datapoint.Counter},
	deriveErrorResponse:        {Type: datapoint.Counter},
	deriveFailedChecks:         {Type: datapoint.Counter},
	deriveRedispatched:         {Type: datapoint.Counter},
	deriveRequestTotal:         {Type: datapoint.Counter},
	deriveRequests:             {Type: datapoint.Counter},
	deriveResponse1xx:          {Type: datapoint.Counter},
	deriveResponse2xx:          {Type: datapoint.Counter},
	deriveResponse3xx:          {Type: datapoint.Counter},
	deriveResponse4xx:          {Type: datapoint.Counter},
	deriveResponse5xx:          {Type: datapoint.Counter},
	deriveResponseOther:        {Type: datapoint.Counter},
	deriveRetries:              {Type: datapoint.Counter},
	deriveSessionTotal:         {Type: datapoint.Counter},
	deriveSrvAbrt:              {Type: datapoint.Counter},
	deriveSslCacheLookups:      {Type: datapoint.Counter},
	deriveSslCacheMisses:       {Type: datapoint.Counter},
	deriveSslConnections:       {Type: datapoint.Counter},
	deriveUptimeSeconds:        {Type: datapoint.Counter},
	gaugeActiveServers:         {Type: datapoint.Gauge},
	gaugeBackupServers:         {Type: datapoint.Gauge},
	gaugeCheckDuration:         {Type: datapoint.Gauge},
	gaugeConnectionRate:        {Type: datapoint.Gauge},
	gaugeConnectionRateMax:     {Type: datapoint.Gauge},
	gaugeCurrentConnections:    {Type: datapoint.Gauge},
	gaugeCurrentSslConnections: {Type: datapoint.Gauge},
	gaugeDeniedTCPConnections:  {Type: datapoint.Gauge},
	gaugeDeniedTCPSessions:     {Type: datapoint.Gauge},
	gaugeIdlePct:               {Type: datapoint.Gauge},
	gaugeInterceptedRequests:   {Type: datapoint.Gauge},
	gaugeLastSession:           {Type: datapoint.Gauge},
	gaugeMaxConnectionRate:     {Type: datapoint.Gauge},
	gaugeMaxConnections:        {Type: datapoint.Gauge},
	gaugeMaxPipes:              {Type: datapoint.Gauge},
	gaugeMaxSessionRate:        {Type: datapoint.Gauge},
	gaugeMaxSslConnections:     {Type: datapoint.Gauge},
	gaugePipesFree:             {Type: datapoint.Gauge},
	gaugePipesUsed:             {Type: datapoint.Gauge},
	gaugeQueueCurrent:          {Type: datapoint.Gauge},
	gaugeQueueLimit:            {Type: datapoint.Gauge},
	gaugeQueueMax:              {Type: datapoint.Gauge},
	gaugeQueueTimeAvg:          {Type: datapoint.Gauge},
	gaugeRequestRate:           {Type: datapoint.Gauge},
	gaugeRequestRateMax:        {Type: datapoint.Gauge},
	gaugeResponseTimeAvg:       {Type: datapoint.Gauge},
	gaugeRunQueue:              {Type: datapoint.Gauge},
	gaugeSessionCurrent:        {Type: datapoint.Gauge},
	gaugeSessionRate:           {Type: datapoint.Gauge},
	gaugeSessionRateAll:        {Type: datapoint.Gauge},
	gaugeSessionRateLimit:      {Type: datapoint.Gauge},
	gaugeSessionRateMax:        {Type: datapoint.Gauge},
	gaugeSessionTimeAverage:    {Type: datapoint.Gauge},
	gaugeSessionTimeAvg:        {Type: datapoint.Gauge},
	gaugeSslBackendKeyRate:     {Type: datapoint.Gauge},
	gaugeSslFrontendKeyRate:    {Type: datapoint.Gauge},
	gaugeSslRate:               {Type: datapoint.Gauge},
	gaugeTasks:                 {Type: datapoint.Gauge},
	gaugeThrottle:              {Type: datapoint.Gauge},
	gaugeZlibMemUsage:          {Type: datapoint.Gauge},
}

var defaultMetrics = map[string]bool{
	counterServerSelectedTotal: true,
	deriveBytesIn:              true,
	deriveBytesOut:             true,
	deriveDeniedRequest:        true,
	deriveDeniedResponse:       true,
	deriveErrorConnection:      true,
	deriveErrorRequest:         true,
	deriveErrorResponse:        true,
	deriveRedispatched:         true,
	deriveRequests:             true,
	deriveResponse2xx:          true,
	deriveResponse4xx:          true,
	deriveResponse5xx:          true,
	deriveRetries:              true,
	gaugeConnectionRate:        true,
	gaugeIdlePct:               true,
	gaugeQueueCurrent:          true,
	gaugeQueueTimeAvg:          true,
	gaugeRequestRate:           true,
	gaugeResponseTimeAvg:       true,
	gaugeSessionCurrent:        true,
	gaugeSessionRate:           true,
	gaugeSessionRateAll:        true,
	gaugeSessionTimeAvg:        true,
}

var groupMetricsMap = map[string][]string{}

var monitorMetadata = monitors.Metadata{
	MonitorType:       "collectd/haproxy",
	DefaultMetrics:    defaultMetrics,
	Metrics:           metricSet,
	MetricsExhaustive: false,
	Groups:            groupSet,
	GroupMetricsMap:   groupMetricsMap,
	SendAll:           false,
}
