#!/bin/bash

# If the envvar PUSH_TO_REPO=yes (the default), then stuff is pushed to remote
# locations

set -euo pipefail

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

stage_from_version() {
  if [[ "$1" =~ -beta[0-9]$ ]]; then
    echo -n "beta"
  elif [[ "$1" =~ -post$ ]]; then
    echo -n "test"
  else
    echo -n "final"
  fi
}

parse_args_and_release() {
  local new_version=$($SCRIPT_DIR/current-version)
  local push=yes
  local stage=
  local build_all=yes
  local build_docker_image=no
  local build_deb_package=no
  local build_rpm_package=no
  local build_bundle=no
  local build_deployments=no
  local push_windows=no
  local force=no
  local allow_uncommitted=no
  local github_username="${GITHUB_USERNAME-}"
  local github_token="${GITHUB_TOKEN-}"

  while [ -n "${1-}" ]; do
    case $1 in
      --stage)
        stage="$2"

        case $stage in
          final|beta|test) ;;
          *) echo "stage must be 'final', 'beta' or 'test'" >&2 && exit 1 ;;
        esac

        shift 1
        ;;
      --new-version)
        new_version="$2"

        if [[ ! "$new_version" =~ [0-9]\.[0-9]\.[0-9](-beta[0-9])?(-post)? ]]; then
          echo "Version $new_version is in an unexpected format" >&2
          exit 1
        fi

        shift 1
        ;;
      --github-user)
        github_username="$2"
        shift 1
        ;;
      --github-token)
        github_token="$2"
        shift 1
        ;;
      --push)
        push=yes
        ;;
      --no-push)
        push=no
        ;;
      --force)
        force=yes
        ;;
      --allow-uncommitted-files)
        allow_uncommitted=yes
        ;;
      --component)
        case "$2" in
          docker) build_docker_image=yes build_all=no ;;
          deb) build_deb_package=yes build_all=no ;;
          rpm) build_rpm_package=yes build_all=no ;;
          bundle) build_bundle=yes build_all=no ;;
          deployments) build_deployments=yes build_all=no ;;
          windows) push_windows=yes build_all=no ;;
          *) echo "component "$1" not recognized, quitting" >&2 && exit 1 ;;
        esac
        shift 1
        ;;
      *)
        echo "Unknown option $1" >&2
        usage
        exit 1
        ;;
    esac
    shift 1
  done

  if [[ -z "$stage" ]]; then
    stage=$(stage_from_version $new_version)
  fi

  if [[ "$stage" != "test" ]] && ! git diff --exit-code && [[ "$allow_uncommitted" != "yes" ]]; then
    echo "You are making a non-test release and have changes in your local workspace.  Stash them first for a pristine build." >&2
    exit 1
  fi

  if [[ "$stage" != "test" ]] && [[ $(git symbolic-ref HEAD) != "refs/heads/master" ]] && [[ "$force" != "yes" ]]; then
	echo "You are releasing a beta/final release from a branch other than master, which is not allowed." >&2
	exit 1
  fi

  read -p "This is a $stage release of version $new_version, please confirm: [y/N] "
  [[ ! "$REPLY" =~ ^[Yy]$ ]] && echo "Cancelling release" && exit 1

  if [[ "$push_windows" == "yes" ]]; then
    push_windows_bundle "$new_version" "$stage" "$push"
    exit 0
  fi

  if [[ "$stage" != "test" ]] && [[ "$($SCRIPT_DIR/current-version)" != "$new_version" ]]; then
    create_and_push_tag $new_version
  fi

  if [[ "$stage" == "final" ]]; then
    ensure_github_release "v$new_version" "$github_username" "$github_token"
  fi

  if [[ "$build_all" == "yes" ]] || [[ "$build_docker_image" == "yes" ]]; then
    echo "Building docker image..."
    build_docker_image "$stage" "$new_version"
    if [[ "$push" == "yes" ]]; then
      echo "Pushing docker image"
      push_docker_image "$stage" "$new_version"
    fi
  fi

  if [[ "$build_all" == "yes" ]] || [[ "$build_deb_package" == "yes" ]]; then
    echo "Building and pushing deb package"
    build_and_push_package "deb" "$stage" "$push"
    if [[ "$push" == "yes" ]]; then
      $SCRIPT_DIR/invalidate-cloudfront "/debs/signalfx-agent/$stage/*"
    fi
  fi

  if [[ "$build_all" == "yes" ]] || [[ "$build_rpm_package" == "yes" ]]; then
    echo "Building and pushing rpm package"
    build_and_push_package "rpm" "$stage" "$push"
    $SCRIPT_DIR/invalidate-cloudfront "/rpms/signalfx-agent/$stage/*"
  fi

  if [[ "$build_all" == "yes" ]] || [[ "$build_bundle" == "yes" ]]; then
    echo "Making bundle tar.gz"
    make_bundle "$new_version"

    if [[ "$push" == "yes" ]] && [[ "$stage" == "final" ]]; then
      echo "Pushing bundle to Github"
      push_bundle_to_github "$new_version" "$github_username" "$github_token"
    fi
  fi

  # Do these updates after everything has been pushed so that nobody ever sees
  # versions in the master branch that haven't been released.
  if [[ "$stage" == "final" ]] && ([[ "$build_deployments" == "yes" ]] || [[ "$build_all" == "yes" ]]); then
    update_deployment_files "$new_version" "$force"
  fi

  echo "Successfully released $new_version"
}

usage() {
  cat <<EOH
Usage: $0 [options]

Makes a new release of the agent, which involves making a new tag (if not
already created, building a docker image, making new versions of the Linux
distro packaging, as well as making a new standalone bundle.

Options:

  --new-version <version>                    The new version to release.  If not specified, will be inferred from the latest git tag
                                             Note that the version should not include a leading 'v'!
  --component docker|deb|rpm|bundle|windows  Releases only the selected component if specified, otherwise does everything except windows
  --[no-]push                                Whether to push the components to remote sources or not (default, yes)
  --force                                    Ignore checks for uncommited local changes and package repo confirmation
  --allow-uncommitted-files                  Whether to ignore uncommitted files in the current directory
  --stage test|beta|final                    What kind of release this is.  If not specified, will be inferred from the version
  --github-user <username>                   Github username of a user that has permisssions to manage releases
  --github-token <token>                     Github API token for the given user

EOH
}

update_deployment_files() {
  local new_version=$1

  $SCRIPT_DIR/update-deployments-version $new_version

  # Don't do anything if there aren't any changed files
  if ! git --no-pager diff --exit-code deployments; then
    if [[ $force != "yes" ]]; then
      read -p "Above is the diff for deployment files for $new_version, please confirm: [y/N] "
      [[ ! "$REPLY" =~ ^[Yy]$ ]] && echo "Not pushing deployment updates" >&2 && return 1
    fi

    git add deployments
    git commit -m"Update deployment versions to ${new_version}"
    git push origin
  fi
}

create_and_push_tag() {
  local new_version=$1

  new_tag="v${new_version}"
  echo "Tagging repo with ${new_tag}"

  # This will prompt the user for a tag message, which will act as the changelog
  # for this version
  git tag -a "$new_tag"

  if [[ $($SCRIPT_DIR/current-version) != "$new_version" ]]; then
    echo "Something is off, $($SCRIPT_DIR/current_version) should now be $new_version" >&2
    exit 1
  fi

  git push --tags

  echo "Tag pushed"
}

ensure_github_release() {
  local tag=$1
  local username=$2
  local token=$3

  . $SCRIPT_DIR/github-releases.sh

  if ! get_github_release "$tag" "$username" "$token"; then
    echo "Creating Github release..."
    new_github_release $tag $username $token
  else
    echo "Github release already exists"
  fi
}

## Docker image build and push

docker_repo_from_stage() {
  local stage=$1
  if [[ "$stage" != "final" && "$stage" != "beta" ]]; then
    echo -n "quay.io/signalfx/signalfx-agent-dev"
  else
    echo -n "quay.io/signalfx/signalfx-agent"
  fi
}

build_docker_image() {
  local image_name="$(docker_repo_from_stage $1)"
  local new_version="$2"
  echo "Building image $image_name:$new_version"
  AGENT_IMAGE_NAME=$image_name make -C $SCRIPT_DIR/.. image
}

push_docker_image() {
  local stage="$1"
  local new_version="$2"
  docker push $(docker_repo_from_stage $stage):$new_version
}

# Deb package build and push

build_and_push_package() {
  local package_type=$1
  local stage=$2
  local push=$3

  PUSH_TO_REPO=$push make ${package_type}-$stage-package
}

make_bundle() {
  local new_version="$1"
  local expected_output="$SCRIPT_DIR/../signalfx-agent-${new_version}.tar.gz"

  make bundle

  test -f "$expected_output"
  echo "Bundle is built at $expected_output"
}

push_bundle_to_github() {
  local new_version="$1"
  local username="$2"
  local token="$3"

  local bundle_path="$SCRIPT_DIR/../signalfx-agent-${new_version}.tar.gz"

  . $SCRIPT_DIR/github-releases.sh
  upload_asset_to_release v$new_version $bundle_path application/gzip $username $token
}

push_windows_bundle() {
  local new_version="$1"
  local stage="$2"
  local push="$3"
  local src_dir="$SCRIPT_DIR/../build"
  local dest_dir="s3://public-downloads--signalfuse-com/windows/$stage/zip"

  if [[ ! -f "$src_dir/SignalFxAgent-${new_version}-win64.zip" ]]; then
    echo "$src_dir/SignalFxAgent-${new_version}-win64.zip not found!"
    echo "The $new_version Windows agent bundle must be manually built."
    exit 1
  fi

  # ensure that latest.txt is created and has the same version of the bundle
  echo -n "$new_version" > "$src_dir/latest.txt"

  if [[ "$push" == "yes" ]]; then
    if aws s3 ls "$dest_dir/SignalFxAgent-${new_version}-win64.zip"; then
      read -p "SignalFxAgent-${new_version}-win64.zip already exists in $dest_dir. Overwrite? [y/N] "
      [[ ! "$REPLY" =~ ^[Yy]$ ]] && echo "Not pushing windows bundle" >&2 && return 1
    fi
    aws s3 cp "$src_dir/SignalFxAgent-${new_version}-win64.zip" "$dest_dir/SignalFxAgent-${new_version}-win64.zip"
    aws s3 cp "$src_dir/latest.txt" "${dest_dir}/latest/latest.txt"
    $SCRIPT_DIR/invalidate-cloudfront "/windows/$stage/zip/*"
  else
    echo "Nothing to do"
  fi
}

parse_args_and_release $@
