---
version: 2.1
executors:
  machine_image:
    machine:
      image: ubuntu-1604:201903-01

  goexecutor:
    working_directory: /code
    docker:
      - image: golang:1.14.0-alpine
        environment:
          CGO_ENABLED: 0
          AGENT_BIN: /code/signalfx-agent
          GOPATH: /go

  python38:
    working_directory: /opt/signalfx-agent
    docker:
      - image: python:3.8

  docker1809:
    docker:
      - image: docker:18.09

  helm:
    docker:
      - image: alpine/helm:3.0.0

  tile_generator:
    docker:
      - image: cfplatformeng/tile-generator:v14.0.3

commands:
  goexecutor_setup:
    steps:
      - run: apk add --no-cache curl make git bash coreutils

  import_image:
    description: Import the agent image archive from the build job.
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load agent image
          command: |
            [ -f ~/.skip ] && echo "Found ~/.skip, skipping docker image load!" && exit 0
            docker load -i /tmp/workspace/image.tar

  install_pytest:
    description: Install pytest and dependencies with pyenv.
    parameters:
      python_version:
        type: string
        default: "3.8.0"
    steps:
      - restore_cache:
          key: v1-pytest-<< parameters.python_version >>-{{ checksum "tests/requirements.txt" }}
      - run:
          name: Install pytest and dependencies
          command: |
            cd $PYENV_ROOT && git pull && cd -
            pyenv install --skip-existing << parameters.python_version >>
            pyenv global << parameters.python_version >>
            if which pip; then
                pip install --upgrade 'pip==10.0.1'
            else
                curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                python get-pip.py 'pip==10.0.1'
            fi
            pip install -r tests/requirements.txt
            pyenv rehash

            # Machine image only has Go 1.9 installed
            cd /tmp
            wget https://dl.google.com/go/go1.14.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.14.linux-amd64.tar.gz
      - save_cache:
          key: v1-pytest-<< parameters.python_version >>-{{ checksum "tests/requirements.txt" }}
          paths:
            - /opt/circleci/.pyenv

  save_test_results:
    description: Collect and archive test results from `dir`.
    parameters:
      dir:
        type: string
        default: ~/testresults
    steps:
      - store_test_results:
          path: << parameters.dir >>
      - store_artifacts:
          path: << parameters.dir >>

  run_pytest:
    description: Install and run pytest with `pytest_options` for `tests_dir` and save the results.
    parameters:
      markers:
        type: string
        default: ""
      pytest_options:
        type: string
        default: ""
      tests_dir:
        type: string
        default: ./tests
      with_sudo:
        type: boolean
        default: false
      split:
        type: boolean
        default: false
    steps:
      - install_pytest
      - run:
          name: Run pytest
          no_output_timeout: 30m
          environment:
            MARKERS: << parameters.markers >>
            PYTEST_OPTIONS: --verbose --junitxml=~/testresults/results.xml --html=~/testresults/results.html --self-contained-html << parameters.pytest_options >>
            TESTS_DIR: << parameters.tests_dir >>
            WITH_SUDO: << parameters.with_sudo >>
            SPLIT: << parameters.split >>
          command: .circleci/scripts/run-pytest.sh
      - save_test_results

  go_mod_download:
    steps:
      - restore_cache:
          key: v1-go-mod-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
      - run:
          name: go mod download
          command: |
            [[ -d /go/pkg/mod/cache ]] && exit 0
            # retry up to 3 times in case of network issues
            for i in $(seq 1 3); do
                go mod download && exit 0
                sleep 10
            done
            exit 1
      - save_cache:
          key: v1-go-mod-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod

  download_and_cache:
    parameters:
      key:
        type: string
      path:
        type: string
      url:
        type: string
    steps:
      - restore_cache:
          key: << parameters.key >>
      - run:
          name: Download << parameters.url >>
          command: |
            if [[ ! -e "<< parameters.path >>" ]]; then
                wget -O "<< parameters.path >>" << parameters.url >>
            fi
      - save_cache:
          key: << parameters.key >>
          paths:
            - << parameters.path >>

  install_kubectl:
    parameters:
      version:
        type: string
        default: v1.14.0
    steps:
      - download_and_cache:
          key: v5-kubectl-binary-<< parameters.version >>
          path: /tmp/kubectl
          url: https://storage.googleapis.com/kubernetes-release/release/<< parameters.version >>/bin/linux/amd64/kubectl
      - run: |
          sudo mv -f /tmp/kubectl /usr/bin/kubectl
          sudo chmod a+x /usr/bin/kubectl

  install_minikube:
    parameters:
      version:
        type: string
        default: v1.4.0
    steps:
      - download_and_cache:
          key: v2-minikube-binary-<< parameters.version >>
          path: /tmp/minikube
          url: https://storage.googleapis.com/minikube/releases/<< parameters.version >>/minikube-linux-amd64
      - run: |
          sudo mv -f /tmp/minikube /usr/bin/minikube
          sudo chmod a+x /usr/bin/minikube

  install_crictl:
    parameters:
      version:
        type: string
        default: v1.16.0
    steps:
      - download_and_cache:
          key: v2-crictl-binary-<< parameters.version >>
          path: /tmp/crictl.tar.gz
          url: https://github.com/kubernetes-sigs/cri-tools/releases/download/<< parameters.version >>/crictl-<< parameters.version >>-linux-amd64.tar.gz
      - run: |
          sudo tar -zxvf /tmp/crictl.tar.gz -C /usr/bin/
          sudo chmod a+x /usr/bin/crictl

  install_cni:
    parameters:
      version:
        type: string
        default: v0.6.0
    steps:
      - download_and_cache:
          key: v2-cni-binaries-<< parameters.version >>
          path: /tmp/cni.tgz
          url: https://github.com/containernetworking/cni/releases/download/<< parameters.version >>/cni-amd64-<< parameters.version >>.tgz
      - run: |
          sudo mkdir -p /opt/cni/bin/
          sudo tar -zxvf /tmp/cni.tgz -C /opt/cni/bin/
          sudo chmod a+x /opt/cni/bin/*

  install_cni_plugins:
    parameters:
      version:
        type: string
        default: v0.8.2
    steps:
      - download_and_cache:
          key: v2-cni-plugins-<< parameters.version >>
          path: /tmp/cni-plugins.tgz
          url: https://github.com/containernetworking/plugins/releases/download/<< parameters.version >>/cni-plugins-linux-amd64-<< parameters.version >>.tgz
      - run: |
          sudo mkdir -p /opt/cni/bin/
          sudo tar -zxvf /tmp/cni-plugins.tgz -C /opt/cni/bin/
          sudo chmod a+x /opt/cni/bin/*

  install_crio:
    parameters:
      version:
        type: string
        default: "1.15"
    steps:
      - install_cni
      - install_cni_plugins
      - run:
          name: Install cri-o
          environment:
            CRIO_VERSION: << parameters.version >>
          command: .circleci/scripts/install-crio.sh

  start_minikube:
    parameters:
      version:
        type: string
        default: v1.9.2
      k8s_version:
        type: string
        default: v1.14.0
      options:
        type: string
        default: ""
    steps:
      - install_crictl
      - install_kubectl:
          version: << parameters.k8s_version >>
      - install_minikube:
          version: << parameters.version >>
      - run:
          name: Start minikube
          environment:
            K8S_VERSION: << parameters.k8s_version >>
            OPTIONS: << parameters.options >>
          command: .circleci/scripts/start-minikube.sh

jobs:
  build:
    executor: docker1809
    steps:
      - run: apk add git make bash openssh-client
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: |
          PULL_CACHE=yes AGENT_VERSION=latest make bundle
      - run: |
          mkdir -p /tmp/workspace
          docker save -o /tmp/workspace/image.tar quay.io/signalfx/signalfx-agent-dev:latest
          mv signalfx-agent-latest.tar.gz /tmp/workspace/
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - image.tar
            - signalfx-agent-latest.tar.gz
      - store_artifacts:
          path: /tmp/workspace/signalfx-agent-latest.tar.gz

  modules_and_generate:
    executor: goexecutor
    steps:
      - checkout
      - goexecutor_setup
      - go_mod_download
      - run: |
          go mod download
          go generate ./...
          go mod tidy
          git diff --exit-code || (echo 'Go modules are not tidied and/or generated code is not properly committed. Run `go generate ./... && go mod tidy` and commit the changes.' && exit 1)

  gotests:
    executor: goexecutor
    steps:
      - checkout
      - goexecutor_setup
      - go_mod_download
      # Limit to 4 cores because CircleCI reports 36 cores which will cause OOM when go test is run and tries
      # to build many binaries in parallel. `go build` can use a max of 1 GB per invokation.
      - run: |
          mkdir ~/testresults
          (cd /tmp; GO111MODULE=on go get gotest.tools/gotestsum)
          go generate ./...
          CGO_ENABLED=0 gotestsum --format short-verbose --junitfile ~/testresults/unit.xml --raw-command -- go test --json -p 4 ./...
      - save_test_results

  docs_test:
    executor: goexecutor
    steps:
      - checkout
      - goexecutor_setup
      - go_mod_download
      - run: .circleci/scripts/install-gomplate.sh
      - run: |
          make signalfx-agent
          bash -ec "make docs && git diff --exit-code" || \
            (echo 'Autogenerated docs and/or the selfdescribe.json file are not in sync with their source! If you directly edited a doc file, please move the changes to the source where the doc is generated from (use grep to find where based on existing doc content). In either case, you need to run `make docs` in the dev image and commit those changes.' && exit 1)

  helm_check:
    executor: helm
    steps:
      - checkout
      - goexecutor_setup
      - run: .circleci/scripts/run-helm-check.sh

  integration_tests:
    executor: machine_image
    parallelism: 4
    steps:
      - checkout
      - import_image
      - run: .circleci/scripts/setup-integration-tests.sh
      - run_pytest:
          pytest_options: -n auto
          with_sudo: true
          split: true

  perf_tests:
    executor: machine_image
    steps:
      - checkout
      - import_image
      - run: .circleci/scripts/setup-perf-tests.sh
      - run_pytest:
          markers: perf_test
          pytest_options: -n1

  k8s_integration_tests:
    executor: machine_image
    parameters:
      k8s_version:
        type: string
      with_crio:
        type: boolean
        default: false
    steps:
      - checkout
      - import_image
      - run:
          environment:
            K8S_VERSION: << parameters.k8s_version >>
            WITH_CRIO: << parameters.with_crio >>
          command: .circleci/scripts/setup-k8s-tests.sh
      - when:
          condition: << parameters.with_crio >>
          steps:
            - install_crio
            - start_minikube:
                k8s_version: << parameters.k8s_version >>
                options: --container-runtime=crio --enable-default-cni --network-plugin=cni --extra-config=kubelet.network-plugin=cni --extra-config=kubelet.cgroup-driver=systemd
      - unless:
          condition: << parameters.with_crio >>
          steps:
            - start_minikube:
                k8s_version: << parameters.k8s_version >>
      - run_pytest:
          markers: kubernetes
          pytest_options: -n auto --no-use-minikube --agent-image-name=localhost:5000/signalfx-agent:latest --kubeconfig=/home/circleci/.kube/config

  installer_tests:
    executor: machine_image
    steps:
      - checkout
      - run: .circleci/scripts/setup-installer-tests.sh
      - run_pytest:
          markers: installer
          pytest_options: -n auto
          tests_dir: ./tests/packaging/

  package_tests:
    executor: machine_image
    parallelism: 2
    parameters:
      package_type:
        default: "rpm"
        type: enum
        enum: ["rpm", "deb"]
    steps:
      - checkout
      - run:
          environment:
            PACKAGE_TYPE: << parameters.package_type >>
          command: .circleci/scripts/setup-package-tests.sh
      - run_pytest:
          pytest_options: -n auto
          tests_dir: ./tests/packaging

  bundle_tests:
    executor: machine_image
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: .circleci/scripts/setup-bundle-tests.sh
      - run_pytest:
          markers: bundle
          pytest_options: -n auto --test-bundle-path=/tmp/workspace/signalfx-agent-latest.tar.gz
          tests_dir: ./tests/packaging

  deployment_tests:
    executor: machine_image
    parallelism: 2
    parameters:
      deployment_type:
        default: "chef"
        type: enum
        enum: ["chef", "puppet", "salt", "ansible"]
    steps:
      - checkout
      - run:
          environment:
            DEPLOYMENT_TYPE: << parameters.deployment_type >>
          command: .circleci/scripts/run-deployment-tests.sh
      - save_test_results
      - run_pytest:
          pytest_options: -n auto
          tests_dir: ./tests/deployments/

  pylint_black:
    executor: python38
    parameters:
      target:
        default: "python"
        type: enum
        enum: ["python", "pytest"]
    environment:
      TARGET: << parameters.target >>
    steps:
      - checkout
      - run: .circleci/scripts/run-pylint-black.sh

  check_links:
    executor: machine_image
    steps:
      - checkout
      - run: |
          if [ "$CIRCLE_BRANCH" != "master" ]; then
              if ! scripts/changes-include-dir $(find . -iname "*.md" -not -path "./vendor/*" | sed 's|^\./||'); then
                  echo "No markdown doc changes, skipping test."
                  exit 0
              fi
          fi
          make check-links

  dependency_check:
    docker:
      - image: owasp/dependency-check:5.2.2
        user: root
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          key: v1-dependency-check-nvd-{{ checksum ".circleci/scripts/run-dependency-check.sh" }}
      - run: .circleci/scripts/run-dependency-check.sh
      - save_cache:
          key: v1-dependency-check-nvd-{{ checksum ".circleci/scripts/run-dependency-check.sh" }}
          paths:
            - /usr/share/dependency-check/data
      - save_test_results:
          dir: /root/project/reports

  pcf_tile_build:
    executor: tile_generator
    steps:
      - run: |
          if ! command -v git; then
            apt-get update
            apt-get install -y git
          fi
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          if [[ "$CIRCLE_BRANCH" != "master" && -z "$CIRCLE_TAG" ]] && ! scripts/changes-include-dir deployments/cloudfoundry; then
              echo "No changes in deployments/cloudfoundry, skipping build."
              exit 0
          fi
          AGENT_VERSION=$(./scripts/current-version) AGENT_BUNDLE=/tmp/workspace/signalfx-agent-latest.tar.gz deployments/cloudfoundry/tile/make-latest-tile
          mkdir -p /tmp/pcf_tile
          mv deployments/cloudfoundry/tile/product/signalfx-monitoring-*.pivotal /tmp/pcf_tile
      - store_artifacts:
          path: /tmp/pcf_tile

  update_stage_cache:
    docker:
      - image: docker:18.09
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: |
          apk add make bash
          docker login -u="signalfx+circleci" -p="$CIRCLECI_QUAY_TOKEN" quay.io
          PULL_CACHE=yes make stage-cache

workflows:
  build_test:
    jobs:
      - build:
          filters:
            tags:
              only:
                - /^v\d+\.\d+\.\d+.*/
      - modules_and_generate
      - gotests
      - integration_tests:
          requires:
            - build
      - perf_tests:
          requires:
            - build
      - k8s_integration_tests:
          name: k8s_v1.18.0_integration_tests
          k8s_version: v1.18.0
          requires:
            - build
            - helm_check
      - k8s_integration_tests:
          name: k8s_v1.17.0_integration_tests
          k8s_version: v1.17.0
          requires:
            - build
            - helm_check
      - k8s_integration_tests:
          name: k8s_v1.16.0_integration_tests
          k8s_version: v1.16.0
          requires:
            - build
            - helm_check
      - k8s_integration_tests:
          name: k8s_v1.15.0_integration_tests
          k8s_version: v1.15.0
          requires:
            - build
            - helm_check
      - k8s_integration_tests:
          name: k8s_v1.14.0_integration_tests
          k8s_version: v1.14.0
          requires:
            - build
            - helm_check
      - k8s_integration_tests:
          name: k8s_crio_integration_tests
          k8s_version: v1.18.0
          with_crio: true
          requires:
            - build
            - helm_check
      - docs_test
      - installer_tests
      - package_tests:
          name: rpm_package_tests
          package_type: rpm
      - package_tests:
          name: deb_package_tests
          package_type: deb
      - bundle_tests:
          requires:
            - build
      - deployment_tests:
          name: chef_tests
          deployment_type: chef
      - deployment_tests:
          name: puppet_tests
          deployment_type: puppet
      - deployment_tests:
          name: salt_tests
          deployment_type: salt
      - deployment_tests:
          name: ansible_tests
          deployment_type: ansible
      - pylint_black:
          name: pytest_lint
          target: pytest
      - pylint_black:
          name: python_lint
          target: python
      - helm_check
      - check_links
      - dependency_check:
          requires:
            - build
      - pcf_tile_build:
          filters:
            tags:
              only:
                - /^v\d+\.\d+\.\d+.*/
          requires:
            - build

  stage_cache_job:
    jobs:
      - update_stage_cache
    triggers:
      - schedule:
          # Run every two hours during US workdays
          cron: "0 10,12,14,16,18,20,22,0 * * 1-5"
          filters:
            branches:
              only:
                - master
