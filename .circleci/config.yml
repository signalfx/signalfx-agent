---
version: 2.1
executors:
  machine_image:
    machine:
      image: ubuntu-1604:201903-01

  goexecutor:
    working_directory: /code
    docker:
      - image: golang:1.12.1-alpine
        environment:
          CGO_ENABLED: 0
          AGENT_BIN: /code/signalfx-agent

  python36:
    working_directory: /opt/signalfx-agent
    docker:
      - image: python:3.6

  docker1809:
    docker:
      - image: docker:18.09

  helm:
    docker:
     - image: alpine/helm:2.13.0


commands:
  goexecutor_setup:
    steps:
      - run: apk add --no-cache curl make git bash coreutils

  import_image:
    description: Import the agent image archive from the build job.
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load agent image
          command: |
            [ -f ~/.skip ] && echo "Found ~/.skip, skipping docker image load!" && exit 0
            docker load -i /tmp/workspace/image.tar

  install_pytest:
    description: Install pytest and dependencies with pyenv 3.6.3.
    steps:
      - restore_cache:
          key: v1-pytest-{{ checksum "tests/requirements.txt" }}
      - run:
          name: Install pytest and dependencies
          command: |
            pyenv install --skip-existing 3.6.3
            pyenv global 3.6.3
            if which pip; then
                pip install --upgrade 'pip==10.0.1'
            else
                curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                python get-pip.py 'pip==10.0.1'
            fi
            pip install -r tests/requirements.txt
            pyenv rehash

            # Machine image only has Go 1.9 installed
            cd /tmp
            wget https://dl.google.com/go/go1.12.1.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.12.1.linux-amd64.tar.gz
      - save_cache:
          key: v1-pytest-{{ checksum "tests/requirements.txt" }}
          paths:
            - /opt/circleci/.pyenv

  save_test_results:
    description: Collect and archive test results from `dir`.
    parameters:
      dir:
        type: string
        default: "~/testresults"
    steps:
      - store_test_results:
          path: << parameters.dir >>
      - store_artifacts:
          path: << parameters.dir >>

  run_pytest:
    description: Install and run pytest with `pytest_options` for `tests_dir` and save the results.
    parameters:
      pytest_options:
        type: string
      tests_dir:
        type: string
        default: "./tests"
      with_sudo:
        type: boolean
        default: false
    steps:
      - install_pytest
      - run:
          name: Run pytest
          no_output_timeout: 30m
          environment:
            PYTEST_OPTIONS: "--verbose --junitxml=~/testresults/results.xml --html=~/testresults/results.html --self-contained-html"
            TESTS_DIR: "<< parameters.tests_dir >>"
          command: |
            set -x
            [ -f ~/.skip ] && echo "Found ~/.skip, skipping tests!" && exit 0
            [ -d "$TESTS_DIR" ] || (echo "Directory '$TESTS_DIR' not found!" && exit 1)
            [ -n "$TEST_SERVICES_DIR" ] || export TEST_SERVICES_DIR="$(pwd)/test-services"
            mkdir -p /tmp/scratch
            mkdir -p ~/testresults
            MAX_CIRCLE_NODES=${MAX_CIRCLE_NODES:-$CIRCLE_NODE_TOTAL}
            if [[ $MAX_CIRCLE_NODES -gt 1 && -n "$MARKERS" ]]; then
                # Collect tests based on MARKERS and split them for parallelism
                TESTS=$(pytest --collect-only -m "$MARKERS" $TESTS_DIR | grep '<Module.*>' | cut -d "'" -f2 | \
                    circleci tests split --split-by=timings --total=$MAX_CIRCLE_NODES --index=$CIRCLE_NODE_INDEX)
                [ -n "$TESTS" ] || (echo "No test files found after splitting based on '$MARKERS' marker(s)!" && exit 1)
            else
                TESTS=$TESTS_DIR
            fi
            echo "Executing test(s) from $TESTS"
            if [ "<< parameters.with_sudo >>" = "true" ]; then
                sudo -E $PYENV_ROOT/shims/pytest << parameters.pytest_options >> $PYTEST_OPTIONS $TESTS
            else
                pytest << parameters.pytest_options >> $PYTEST_OPTIONS $TESTS
            fi
      - save_test_results

  install_kubectl:
    parameters:
      version:
        type: string
        default: v1.14.0
    steps:
      - restore_cache:
          key: "v2-kubectl-binary-<< parameters.version >>"
      - run:
          name: Install Kubectl
          command: |
            [[ -f /home/circleci/bin/kubectl || -f ~/.skip ]] && exit 0
            wget -O /home/circleci/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/<< parameters.version >>/bin/linux/amd64/kubectl
            chmod a+x /home/circleci/bin/kubectl
      - save_cache:
          key: "v2-kubectl-binary-<< parameters.version >>"
          paths:
            - /home/circleci/bin/kubectl

  install_helm:
    parameters:
      version:
        type: string
        default: v2.13.0
    steps:
      - restore_cache:
          key: "v1-helm-binary-<< parameters.version >>"
      - run:
          name: Install Helm
          command: |
            [[ -f /home/circleci/bin/helm || -f ~/.skip ]] && exit 0
            wget -O /tmp/helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-<< parameters.version >>-linux-amd64.tar.gz
            tar -zxvf /tmp/helm.tar.gz -C /tmp
            mv /tmp/linux-amd64/helm /home/circleci/bin/helm
            chmod a+x /home/circleci/bin/helm
      - save_cache:
          key: "v1-helm-binary-<< parameters.version >>"
          paths:
            - /home/circleci/bin/helm
jobs:
  build:
    executor: docker1809
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: |
          apk add make bash
          PULL_CACHE=yes AGENT_VERSION=latest make image
      - run: |
          mkdir -p /tmp/workspace
          docker save -o /tmp/workspace/image.tar quay.io/signalfx/signalfx-agent-dev:latest
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - image.tar

  modules:
    executor: goexecutor
    steps:
      - checkout
      - goexecutor_setup
      - run: |
          go mod tidy
          go mod vendor
          git diff --exit-code || (echo 'go modules are not properly vendored. Run `make vendor` and commit the changes.' && exit 1)

  gotests:
    executor: goexecutor
    steps:
      - checkout
      - goexecutor_setup
      # Limit to 4 cores because CircleCI reports 36 cores which will cause OOM when go test is run and tries
      # to build many binaries in parallel. `go build` can use a max of 1 GB per invokation.
      - run: |
          mkdir ~/testresults
          (cd /tmp; GO111MODULE=on go get github.com/tebeka/go2xunit)
          bash -eo pipefail -c "NUM_CORES=4 make -s test | tee /dev/stderr | go2xunit" > ~/testresults/unit.xml
      - save_test_results

  docs_test:
    executor: goexecutor
    steps:
      - checkout
      - goexecutor_setup
      - run: |
          apk add --no-cache jq
          curl -LOk https://github.com/hairyhenderson/gomplate/releases/download/v3.4.0/gomplate_linux-amd64
          mv gomplate_linux-amd64 /usr/bin/gomplate
          chmod +x /usr/bin/gomplate
          make signalfx-agent
          bash -ec "make docs && git diff --exit-code" || \
          (echo 'Autogenerated docs and/or the selfdescribe.json file are not in sync with their source! If you directly edited a doc file, please move the changes to the source where the doc is generated from (use grep to find where based on existing doc content). In either case, you need to run `make docs` in the dev image and commit those changes.' && exit 1)

  helm_check:
    executor: helm
    steps:
      - checkout
      - run: |
          apk add --no-cache git bash
          if [ "$CIRCLE_BRANCH" != "master" ]; then
              git checkout -b $CIRCLE_BRANCH
              if ! scripts/changes-include-dir deployments/k8s; then
                  echo "No changes in deployments/k8s, skipping check."
                  exit 0
              fi
          fi
          bash -ec "./deployments/k8s/generate-from-helm && git diff --exit-code" || \
          (echo 'Helm charts and generated sample K8s resources are out of sync.  Please run "./deployments/k8s/generate-from-helm" in the dev-image and commit the changes.' && exit 1)
          helm lint ./deployments/k8s/helm/signalfx-agent || \
          (echo 'Helm lint issues found. Please run "helm lint ./deployments/k8s/helm/signalfx-agent" in the dev-image, resolve the issues, and commit the changes' && exit 1)

  integration_tests:
    executor: machine_image
    parallelism: 4
    steps:
      - checkout
      - import_image
      - run:
          name: Setup test environment
          command: |
            BUNDLE_DIR="$(pwd)/bundle"
            AGENT_BIN="$BUNDLE_DIR/bin/signalfx-agent"
            TEST_SERVICES_DIR="$(pwd)/test-services"
            MARKERS="integration"
            mkdir -p "$BUNDLE_DIR"
            cid=$(docker create quay.io/signalfx/signalfx-agent-dev:latest true)
            docker export $cid | tar -C "$BUNDLE_DIR" -xf -
            $BUNDLE_DIR/bin/patch-interpreter $BUNDLE_DIR
            docker rm -fv $cid
            [ -f "$AGENT_BIN" ] || (echo "$AGENT_BIN not found!" && exit 1)
            if [ "$CIRCLE_BRANCH" != "master" ]; then
                if ! scripts/changes-include-dir $(find . -iname "*devstack*" -o -iname "*openstack*" | sed 's|^\./||' | grep -v '^docs/'); then
                    MARKERS="$MARKERS and not openstack"
                fi
                if ! scripts/changes-include-dir $(find . -iname "*conviva*" | sed 's|^\./||' | grep -v '^docs/'); then
                    MARKERS="$MARKERS and not conviva"
                fi
                if ! scripts/changes-include-dir $(find . -iname "*jenkins*" | sed 's|^\./||' | grep -v '^docs/'); then
                    MARKERS="$MARKERS and not jenkins"
                fi
            fi
            echo "export BUNDLE_DIR='$BUNDLE_DIR'" >> $BASH_ENV
            echo "export AGENT_BIN='$AGENT_BIN'" >> $BASH_ENV
            echo "export MARKERS='$MARKERS'" >> $BASH_ENV
      - run_pytest:
          pytest_options: "-n4 -m \"$MARKERS\""
          with_sudo: true

  perf_tests:
    executor: machine_image
    steps:
      - checkout
      - import_image
      - run:
          name: Setup test environment
          command: |
            BUNDLE_DIR="$(pwd)/bundle"
            AGENT_BIN="$BUNDLE_DIR/bin/signalfx-agent"
            TEST_SERVICES_DIR="$(pwd)/test-services"
            MARKERS="perf_test"
            mkdir -p "$BUNDLE_DIR"
            cid=$(docker create quay.io/signalfx/signalfx-agent-dev:latest true)
            docker export $cid | tar -C "$BUNDLE_DIR" -xf -
            $BUNDLE_DIR/bin/patch-interpreter $BUNDLE_DIR
            docker rm -fv $cid
            [ -f "$AGENT_BIN" ] || (echo "$AGENT_BIN not found!" && exit 1)
            echo "export BUNDLE_DIR='$BUNDLE_DIR'" >> $BASH_ENV
            echo "export AGENT_BIN='$AGENT_BIN'" >> $BASH_ENV
            echo "export TEST_SERVICES_DIR='$TEST_SERVICES_DIR'" >> $BASH_ENV
            echo "export MARKERS='$MARKERS'" >> $BASH_ENV
      - run_pytest:
          pytest_options: "-n1 -m \"$MARKERS\""

  k8s_integration_tests:
    executor: machine_image
    parameters:
      k8s_version:
        type: string
    environment:
      K8S_VERSION: "<< parameters.k8s_version >>"
      K8S_MIN_VERSION: "v1.8.0"
      K8S_MAX_VERSION: "v1.14.0"
      K8S_SFX_AGENT: "quay.io/signalfx/signalfx-agent-dev:latest"
      MARKERS: "kubernetes"
    steps:
      - checkout
      - run:
          name: Setup test environment
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ] || scripts/changes-include-dir deployments/k8s tests/deployments/helm; then
                # Run k8s and helm tests for all K8S versions if branch is master or there are deployment changes
                echo "MARKERS='kubernetes or helm'" >> $BASH_ENV
            elif ! scripts/changes-include-dir Gopkg.toml $(find . -iname "*k8s*" -o -iname "*kube*" | sed 's|^\./||' | grep -v '^docs/'); then
                # Only run k8s tests for K8S_MIN_VERSION and K8S_MAX_VERSION if there are no relevant changes.
                if [[ "$K8S_VERSION" != "$K8S_MIN_VERSION" && "$K8S_VERSION" != "$K8S_MAX_VERSION" ]]; then
                    echo "Skipping K8S $K8S_VERSION integration tests."
                    touch ~/.skip
                    exit 0
                fi
            fi

            make run-minikube
      - install_kubectl:
          version: "<< parameters.k8s_version >>"
      - install_helm
      - import_image
      - run:
          name: Push image to minikube
          command: |
            [ -f ~/.skip ] && exit 0
            docker tag quay.io/signalfx/signalfx-agent-dev:latest localhost:5000/signalfx-agent:latest
            docker push localhost:5000/signalfx-agent:latest
      - run_pytest:
          pytest_options: "-n4 -m \"$MARKERS\""

  installer_tests:
    executor: machine_image
    steps:
      - checkout
      - run: |
          if [ "$CIRCLE_BRANCH" != "master" ]; then
              if ! scripts/changes-include-dir deployments/installer tests/packaging/installer_test.py tests/packaging/common.py tests/packaging/images; then
                  echo "Installer code has not changed, skipping tests!"
                  touch ~/.skip
                  exit 0
              fi
          fi
      - run_pytest:
          pytest_options: "-n auto -m 'installer'"
          tests_dir: "./tests/packaging/"

  package_tests:
    executor: machine_image
    parallelism: 2
    parameters:
      package_type:
        default: "rpm"
        type: enum
        enum: ["rpm", "deb"]
    environment:
      PACKAGE_TYPE: "<< parameters.package_type >>"
    steps:
      - checkout
      - run: |
          if [ "$CIRCLE_BRANCH" != "master" ]; then
              if ! scripts/changes-include-dir Dockerfile packaging tests/packaging scripts/patch-interpreter scripts/patch-rpath; then
                  echo "packaging code has not changed, skipping tests!"
                  touch ~/.skip
                  exit 0
              fi
          fi
          export PULL_CACHE=yes
          make << parameters.package_type >>-test-package
          # Run non-upgrade tests on node 0, and upgrade tests on node 1
          if [ $CIRCLE_NODE_INDEX -eq 0 ]; then
              echo "export TEST_MARKERS='<< parameters.package_type >> and not upgrade'" >> $BASH_ENV
          else
              echo "export TEST_MARKERS='<< parameters.package_type >> and upgrade'" >> $BASH_ENV
          fi
      - run_pytest:
          pytest_options: "-n auto -m \"$TEST_MARKERS\""
          tests_dir: "./tests/packaging"

  bundle_tests:
    executor: machine_image
    parallelism: 1
    steps:
      - checkout
      - run: |
          if [ "$CIRCLE_BRANCH" != "master" ]; then
              if ! scripts/changes-include-dir Dockerfile packaging tests/packaging scripts/patch-interpreter scripts/patch-rpath; then
                  echo "packaging code has not changed, skipping tests!"
                  touch ~/.skip
                  exit 0
              fi
          fi
          export PULL_CACHE=yes
          AGENT_VERSION=latest make bundle
      - run_pytest:
          pytest_options: "-n auto -m \"bundle\" --test-bundle-path=\"./signalfx-agent-latest.tar.gz\""
          tests_dir: "./tests/packaging"

  deployment_tests:
    executor: machine_image
    parallelism: 2
    parameters:
      deployment_type:
        default: "chef"
        type: enum
        enum: ["chef", "puppet", "salt", "ansible"]
    environment:
      DEPLOYMENT: "<< parameters.deployment_type >>"
    steps:
      - checkout
      - run:
          name: Run << parameters.deployment_type >> tests
          command: |
            mkdir -p ~/testresults
            if [ "$CIRCLE_BRANCH" != "master" ]; then
                if ! scripts/changes-include-dir deployments/$DEPLOYMENT tests/deployments/$DEPLOYMENT; then
                    echo "$DEPLOYMENT code has not changed, skipping tests!"
                    touch ~/.skip
                    exit 0
                fi
            fi
            if [ ! -d tests/deployments/$DEPLOYMENT ]; then
                # no pytest tests to execute for deployment
                touch ~/.skip
                # only run subsequent steps on node 0
                [ $CIRCLE_NODE_INDEX -eq 0 ] || exit 0
            fi
            cd deployments/$DEPLOYMENT
            make dev-image
            case "$DEPLOYMENT" in
            chef)
                CHEF_DEV="docker run --rm \
                    --workdir /chef-repo/cookbooks/signalfx_agent \
                    signalfx-agent-chef-dev"

                $CHEF_DEV chef exec rspec --format RspecJunitFormatter | sed '/No examples found./d' | tee ~/testresults/chefspec.xml
                $CHEF_DEV foodcritic .
                $CHEF_DEV cookstyle .
                if [ $CIRCLE_NODE_INDEX -eq 0 ]; then
                    echo "export TEST_MARKERS='chef and not upgrade_downgrade'" >> $BASH_ENV
                else
                    echo "export TEST_MARKERS='chef and upgrade_downgrade'" >> $BASH_ENV
                fi
                ;;
            puppet)
                docker run --rm \
                    -e "CI_SPEC_OPTIONS=--format RspecJunitFormatter -o ~/testresults/puppetspec.xml" \
                    signalfx-agent-puppet-dev \
                    rake spec
                docker run --rm \
                    signalfx-agent-puppet-dev \
                    puppet-lint .
                if [ $CIRCLE_NODE_INDEX -eq 0 ]; then
                    echo "export TEST_MARKERS='puppet and rpm'" >> $BASH_ENV
                else
                    echo "export TEST_MARKERS='puppet and deb'" >> $BASH_ENV
                fi
                ;;
            salt)
                docker run --rm \
                    signalfx-agent-salt-dev \
                    salt '*' state.apply | tee ~/testresults/salt.out
                ;;
            ansible)
                docker run --rm \
                    --cap-add DAC_READ_SEARCH \
                    --cap-add SYS_PTRACE \
                    signalfx-agent-ansible-dev \
                    ansible-playbook -i inventory example-playbook.yml --connection=local \
                    -e '{"sfx_agent_config": {"signalFxAccessToken": "MyToken"}}' | tee ~/testresults/ansible.out
                docker run --rm \
                    signalfx-agent-ansible-dev \
                    ansible-lint .
                ;;
            *)
                echo "Deployment $DEPLOYMENT not supported!"
                exit 1
            esac
      - save_test_results
      - run_pytest:
          pytest_options: "-n auto -m \"$TEST_MARKERS\""
          tests_dir: "./tests/deployments/"

  pylint_black:
    executor: python36
    parameters:
      target:
        default: "python"
        type: enum
        enum: ["python", "pytest"]
    steps:
      - checkout
      - run: |
          TARGET=<< parameters.target >>
          TARGET_DIR=$TARGET
          if [ "$TARGET" = "pytest" ]; then
              TARGET_DIR="tests"
          fi
          if [ "$CIRCLE_BRANCH" != "master" ]; then
              if ! scripts/changes-include-dir $TARGET_DIR; then
                  echo "$TARGET code has not changed, skipping pylint/black!"
                  exit 0
              fi
          fi
          if [ "$TARGET" = "pytest" ]; then
              pip install -q -r tests/requirements.txt
          else
              pip install --no-use-pep517 -q -e python
              pip install -q -r python/test-requirements.txt
          fi
          (make lint-$TARGET && git diff --exit-code $TARGET_DIR ) || \
              (echo "Pylint/black issue(s) found in $TARGET_DIR directory. Run \`make lint-$TARGET\` in the dev image, resolve the issues, and commit the changes." && exit 1)

  check_links:
    executor: machine_image
    steps:
      - checkout
      - run: |
          if [ "$CIRCLE_BRANCH" != "master" ]; then
              if ! scripts/changes-include-dir $(find . -iname "*.md" -not -path "./vendor/*" | sed 's|^\./||'); then
                  echo "No markdown doc changes, skipping test."
                  exit 0
              fi
          fi
          make check-links

  update_stage_cache:
    docker:
      - image: docker:18.09
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: |
          apk add make bash
          docker login -u="signalfx+circleci" -p="$CIRCLECI_QUAY_TOKEN" quay.io
          PULL_CACHE=yes make stage-cache

workflows:
  build_test:
    jobs:
      - build
      - modules
      - gotests
      - integration_tests:
          requires:
            - build
      - perf_tests:
          requires:
            - build
      - k8s_integration_tests:
          name: "k8s_v1.14.0_integration_tests"
          k8s_version: "v1.14.0"
          requires:
            - build
            - helm_check
      - k8s_integration_tests:
          name: "k8s_v1.13.0_integration_tests"
          k8s_version: "v1.13.0"
          requires:
            - build
            - helm_check
      - k8s_integration_tests:
          name: "k8s_v1.12.0_integration_tests"
          k8s_version: "v1.12.0"
          requires:
            - build
            - helm_check
      - k8s_integration_tests:
          name: "k8s_v1.11.0_integration_tests"
          k8s_version: "v1.11.0"
          requires:
            - build
            - helm_check
      - k8s_integration_tests:
          name: "k8s_v1.10.0_integration_tests"
          k8s_version: "v1.10.0"
          requires:
            - build
            - helm_check
      - k8s_integration_tests:
          name: "k8s_v1.9.0_integration_tests"
          k8s_version: "v1.9.0"
          requires:
            - build
            - helm_check
      - k8s_integration_tests:
          name: "k8s_v1.8.0_integration_tests"
          k8s_version: "v1.8.0"
          requires:
            - build
            - helm_check
      - docs_test
      - installer_tests
      - package_tests:
          name: "rpm_package_tests"
          package_type: "rpm"
      - package_tests:
          name: "deb_package_tests"
          package_type: "deb"
      - bundle_tests
      - deployment_tests:
          name: "chef_tests"
          deployment_type: "chef"
      - deployment_tests:
          name: "puppet_tests"
          deployment_type: "puppet"
      - deployment_tests:
          name: "salt_tests"
          deployment_type: "salt"
      - deployment_tests:
          name: "ansible_tests"
          deployment_type: "ansible"
      - pylint_black:
          name: "pytest_lint"
          target: "pytest"
      - pylint_black:
          name: "python_lint"
          target: "python"
      - helm_check
      - check_links

  stage_cache_job:
    jobs:
      - update_stage_cache
    triggers:
      - schedule:
          # Run every two hours during US workdays
          cron: "0 10,12,14,16,18,20,22,0 * * 1-5"
          filters:
            branches:
              only:
                - master
