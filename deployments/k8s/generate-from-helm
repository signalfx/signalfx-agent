#!/bin/bash

set -euxo pipefail

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

AGENT_CHART_DIR="$SCRIPT_DIR/helm/signalfx-agent"

AGENT_RELEASE_VERSION=${AGENT_RELEASE_VERSION-$($SCRIPT_DIR/../../scripts/latest-final-release)}

tmpdir=$(mktemp -d)

trap "rm -rf $tmpdir" EXIT

render() {
  local outdir=$1
  local isServerless=$2

  helm template \
      signalfx-agent \
      --namespace signalfx-agent \
      --set signalFxAccessToken=MY_TOKEN \
      --set clusterName=MY-CLUSTER \
      --set fullnameOverride=signalfx-agent \
      --set agentVersion=$AGENT_RELEASE_VERSION \
	  --set isServerless=$isServerless \
      --output-dir $tmpdir \
      $AGENT_CHART_DIR

  templates="configmap.yaml daemonset.yaml deployment.yaml clusterrole.yaml clusterrolebinding.yaml serviceaccount.yaml"
  for f in $templates; do
	fullpath=$tmpdir/signalfx-agent/templates/$f
	if [[ "$f" == "daemonset.yaml" && $isServerless == "true" ]]; then
	  continue
	fi

	if [[ "$f" == "deployment.yaml" && $isServerless == "false" ]]; then
	  continue
	fi

    cat $fullpath | \
        sed -e 's/[[:space:]]*$//' | \
        grep -v 'chart: signalfx-agent' | \
        grep -v 'namespace: signalfx-agent' | \
        grep -v 'heritage: Helm' | \
        grep -iv 'release: signalfx-agent' \
      > $outdir/$f
    echo "Wrote resource $f"
  done

  echo '  namespace: MY_AGENT_NAMESPACE' >> $outdir/clusterrolebinding.yaml

  rm -rf $tmpdir/*
}

render $SCRIPT_DIR "false"
render $SCRIPT_DIR/serverless "true"
