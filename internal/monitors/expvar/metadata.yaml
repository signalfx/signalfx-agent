- dimensions: null
  doc: |
    This monitor exports metrics derived from [expvar](https://golang.org/pkg/expvar/)
    variables in JSON objects retrieved from a HTTP endpoint.

    The monitor uses configured JSON paths to get metric and dimension values from the fetched JSON objects.
    [Memstats metrics](https://github.com/signalfx/integrations/blob/master/expvar/docs/expvar_metrics.md)
    are created by default. They do not require any configuration. They are derived from variable
    [memstats](https://golang.org/pkg/runtime/) that is exposed by default.

    Below is a sample YAML configuration showing the minimal configuration of the expvar monitor. Only
    memstats metrics will be exported for this configuration. The `extraDimensions` field is not required but recommended.
    ```
    monitors:
    - type: expvar
      host: 172.17.0.3
      path: /debug/vars
      port: 8000
    ```
    It is recommended to add the `metric_source` extra dimension as show below in order to facilitate filtering in
    SignalFx.
    ```
    monitors:
    - type: expvar
      host: 172.17.0.3
      path: /debug/vars
      port: 8000
      extraDimensions:
        metric_source: expvar
    ```

    Below is a sample YAML configuration showing the configuration of custom metrics `xyz` and `h.i`. The `name`s
    of metrics and dimensionals are optional. The `JSONPath` is used for `name` instead if not provided.
    ```
    monitors:
    - type: expvar
      host: 172.12.0.6
      path: /debug/vars
      port: 8123
        metrics:
          - name: xyz
            JSONPath: a.b.c.d
            type: counter
            dimensions:
              - name: rst
                JSONPath: a.b
          - JSONPath: h.i
            type: gauge
          - JSONPath: j
            type: gauge
            dimensions:
              - name: kl
                value: mno
      extraDimensions:
        metric_source: expvar
    ```

    Below is an example JSON object that the above configuration may apply to.
    ```
    {
     "a": {
       "b": {
         "c": [
           {
             "d": 4
           },
           {
             "d": 9
           },
         ]
       }
     },
     "h": [
       {
         "i": 1.2
       }
     ],
     "j" : 0.8
    }
    ```

    Two data points will be created for the metric `a.b.c.d`. The first data point will have the value 4 and
    dimensions `a.b = c`, `a.b.c = 0` and `metric_source = expvar`. The second data point will have the value 9
    and dimensions `a.b = c`, `a.b.c = 1` and `metric_source = expvar`. The monitor creates dimensions such as
    `a.b.c` automatically to store array indexes.

    For metric `h.i`, a data point of value 1.2, dimensions `h = 0` and `metric_source = expvar` will be created.

    For metric `j`, a data point of value 0.8, dimensions `kl = mno` and `metric_source = expvar` will be created.
    Note that the value for dimension `kl` was provided.

    The path of a dimension must follow the path of its metric and be shorter.
  metrics:
  - name: memstats.alloc
    type: gauge
    description: Bytes of allocated heap objects. Same as memstats.heap_alloc
    included: false
  - name: memstats.heap_alloc
    type: gauge
    description: Bytes of allocated heap objects
    included: true
  - name: memstats.heap_sys
    type: gauge
    description: Bytes of heap memory obtained from the OS
  - name: memstats.heap_idle
    type: gauge
    description: Bytes in idle (unused) spans
    included: true
  - name: memstats.heap_inuse
    type: gauge
    description: Bytes in in-use spans
    included: true
  - name: memstats.heap_released
    type: gauge
    description: Bytes of physical memory returned to the OS
    included: true
  - name: memstats.heap_objects
    type: gauge
    description: Number of allocated heap objects
    included: true
  - name: memstats.stack_inuse
    type: gauge
    description: Bytes in stack spans
    included: true
  - name: memstats.stack_sys
    type: gauge
    description: Bytes of stack memory obtained from the OS
    included: true
  - name: memstats.m_span_inuse
    type: gauge
    description: Bytes of allocated mspan structures
    included: true
  - name: memstats.m_span_sys
    type: gauge
    description: Bytes of memory obtained from the OS for mspan
    included: true
  - name: memstats.m_cache_inuse
    type: gauge
    description: Bytes of allocated mcache structures
    included: true
  - name: memstats.m_cache_sys
    type: gauge
    description: Bytes of memory obtained from the OS for mcache structures
    included: true
  - name: memstats.buck_hash_sys
    type: gauge
    description: Bytes of memory in profiling bucket hash tables
    included: true
  - name: memstats.gc_sys
    type: gauge
    description: Bytes of memory in garbage collection metadata
    included: true
  - name: memstats.other_sys
    type: gauge
    description: Bytes of memory in miscellaneous off-heap runtime allocations
    included: true
  - name: memstats.sys
    type: gauge
    description: total bytes of memory obtained from the OS
    included: true
  - name: memstats.next_gc
    type: gauge
    description: Target heap size of the next GC cycle
    included: true
  - name: memstats.last_gc
    type: gauge
    description: The time the last garbage collection finished, as nanoseconds since 1970 (the UNIX epoch)
    included: true
  - name: memstats.gccpu_fraction
    type: gauge
    description: The fraction of this program's available CPU time used by the GC since the program started
    included: true
  - name: memstats.enable_gc
    type: gauge
    description: Boolean that indicates that GC is enabled. It is always true, even if GOGC=off
    included: true
  - name: memstats.debug_gc
    type: gauge
    description: memstats.debug_gc is currently unused
    included: false
  - name: memstats.most_recent_gc_pause_ns
    type: gauge
    description: Most recent GC stop-the-world pause time in nanoseconds
    included: true
  - name: memstats.most_recent_gc_pause_end
    type: gauge
    description: Most recent GC pause end time, as nanoseconds since 1970 (the UNIX epoch)
    included: true
  - name: memstats.total_alloc
    type: counter
    description: Cumulative bytes allocated for heap objects
    included: true
  - name: memstats.lookups
    type: counter
    description: Number of pointer lookups performed by the runtime
    included: true
  - name: memstats.mallocs
    type: counter
    description: Cumulative count of heap objects allocated
    included: true
  - name: memstats.frees
    type: counter
    description: Cumulative count of heap objects freed
    included: true
  - name: memstats.pause_total_ns
    type: counter
    description: Cumulative nanoseconds in GC stop-the-world pauses since the program started
    included: true
  - name: memstats.num_gc
    type: counter
    description: Number of completed GC cycles
    included: true
  - name: memstats.num_forced_gc
    type: counter
    description: Number of GC cycles that were forced by the application calling the GC function
    included: true
  - name: memstats.by_size.size
    type: counter
    description: The maximum byte size of a class identified by dimension class. It is the class interval upper limit. The values of dimension class are numbers between 0 and 60 inclusive. Consecutive classes are of consecutive dimension class values. The lower limit of a class is the upper limit of the consecutive class below. Metrics memstats.by_size.size, memstats.by_size.mallocs and memstats.by_size.frees of the same class are related
    included: false
  - name: memstats.by_size.mallocs
    type: counter
    description: Cumulative count of heap objects allocated in a class. The class is identified by dimension class and it is as described for metric memstats.by_size.size
    included: false
  - name: memstats.by_size.frees
    type: counter
    description: Cumulative count of heap objects freed in a class. The class is identified by dimension class and it is as described for metric memstats.by_size.size
    included: false
  monitorType: expvar
  properties: null
