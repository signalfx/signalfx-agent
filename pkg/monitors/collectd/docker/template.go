// +build linux

package docker

// AUTOGENERATED BY scripts/collectd-template-to-go.  DO NOT EDIT!!

import (
	"text/template"

	"github.com/signalfx/signalfx-agent/pkg/monitors/collectd"
)

// CollectdTemplate is a template for a docker collectd config file
var CollectdTemplate = template.Must(collectd.InjectTemplateFuncs(template.New("docker")).Parse(`
TypesDB "{{ pythonPluginRoot }}/docker/dockerplugin.db"
LoadPlugin "python"

<Plugin python>
  ModulePath "{{ pythonPluginRoot }}/docker"
  Import "dockerplugin"

  <Module dockerplugin>
    Interval {{.IntervalSeconds}}
    BaseURL "{{.DockerURL}}"
    Timeout 30
    CollectNetworkStats {{toBool .CollectNetworkStats}}
    Verbose false
    Dimension "monitorID" "raw:{{.MonitorID}}"
    {{range $key, $value := .Dimensions -}}
    Dimension "{{$key}}" "{{$value}}"
    {{end -}}
  {{range .ExcludedImages}}
    ExcludeImage "{{.}}"
  {{end}}
  {{range .ExcludedNames}}
    ExcludeName "{{.}}"
  {{end -}}
  {{range $key, $value := .ExcludedLabels}}
    ExcludeLabel "{{$key}}" "{{$value}}"
  {{end -}}
  </Module>

</Plugin>

<Chain "PostCache">
  <Rule>
    <Match "regex">
      Plugin "^docker$"
    </Match>
    <Target "jump">
      Chain "FilterOutDetailedDockerStats"
    </Target>
  </Rule>
</Chain>
<Chain "FilterOutDetailedDockerStats">
  <Rule "CpuUsage">
    <Match "regex">
      Type "^cpu.usage$"
    </Match>
    Target "return"
  </Rule>
  <Rule "MemoryUsage">
    <Match "regex">
      Type "^memory.usage$"
    </Match>
    Target "return"
  </Rule>
  <Rule "NetworkUsage">
    <Match "regex">
      Type "^network.usage$"
    </Match>
    Target "return"
  </Rule>
  <Rule "BlockIO">
    <Match "regex">
      Type "^blkio$"
      TypeInstance "^io_service_bytes_recursive*"
    </Match>
    Target "return"
  </Rule>

  Target "stop"
</Chain>
`)).Option("missingkey=error")
