resources:
- repo: self

trigger:
  branches:
    include:
    - master
  tags:
    include:
    - v*

variables:
  AGENT_BIN: '$(Build.SourcesDirectory)\build\SignalFxAgent\bin\signalfx-agent.exe'
  GO111MODULE: 'on'
  GOPATH: '$(Pipeline.Workspace)/go'
  GOBIN: '$(GOPATH)/bin'
  SANIC_NO_UVLOOP: 'true'
  TEST_SERVICES_DIR: '$(Build.SourcesDirectory)\test-services'
  GOVERSION: "1.13.1"
  GOMOD_HASH: ""
  GOSUM_HASH: ""

jobs:
- job: 'go_lint'
  pool:
    vmImage: 'ubuntu-16.04'
  container: golang:$(GOVERSION)
  steps:
  - template: 'templates/restore-go-cache.yml'
  - script: |
      set -euo pipefail

      lintver="1.20.0"
      curl -sfL https://github.com/golangci/golangci-lint/releases/download/v${lintver}/golangci-lint-${lintver}-linux-amd64.tar.gz > /tmp/golangci-lint.tar.gz
      tar -xf /tmp/golangci-lint.tar.gz -C /tmp
      chmod +x /tmp/golangci-lint-${lintver}-linux-amd64/golangci-lint
      lintbin="/tmp/golangci-lint-${lintver}-linux-amd64/golangci-lint"

      go generate ./...

      echo 'Linting LINUX code'
      CGO_ENABLED=0 GOGC=40 $lintbin run --deadline 5m

      echo 'Linting WINDOWS code'
      GOOS=windows CGO_ENABLED=0 GOGC=40 $lintbin run --deadline 5m

- job: 'win_go_build'
  pool:
    vmImage: 'vs2015-win2012r2'
  steps:
  - template: 'templates/install-go.yml'
    parameters:
      version: $(GOVERSION)
  - powershell: |
      if ("$(Build.SourceBranch)" -match "^refs/tags/v\d+\.\d+\.\d+$") {
          $env:AGENT_VERSION = ("$(Build.SourceBranchName)").Replace("v", "")
      } else {
          $env:AGENT_VERSION = "$(Build.SourceVersion)"
      }
      & ./scripts/windows/make.ps1 signalfx-agent
    displayName: 'Run go build'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'signalfx-agent.exe'
      artifactName: 'exe'

- job: 'win_go_test'
  pool:
    vmImage: 'vs2015-win2012r2'
  steps:
  - template: 'templates/install-go.yml'
    parameters:
      version: $(GOVERSION)
      packages: 'gotest.tools/gotestsum'
  - powershell: |
      & ./scripts/windows/make.ps1 unit_test
    displayName: 'Run go test'
  - task: PublishTestResults@2
    inputs:
      searchFolder: '$(Build.SourcesDirectory)'
      testResultsFormat: 'JUnit'
      testResultsFiles: 'unit_results.xml'
      failTaskOnFailedTests: true
    condition: succeededOrFailed()

- job: 'win_bundle_build'
  pool:
    vmImage: 'vs2015-win2012r2'
  steps:
  - template: 'templates/install-go.yml'
    parameters:
      version: $(GOVERSION)
  - powershell: |
      if ("$(Build.SourceBranch)" -match "^refs/tags/v\d+\.\d+\.\d+$") {
          $env:AGENT_VERSION = ("$(Build.SourceBranchName)").Replace("v", "")
      } else {
          $env:AGENT_VERSION = "$(Build.SourceVersion)"
      }
      & ./scripts/windows/make.ps1 bundle
    displayName: 'Build bundle'
  - task: CopyFiles@2
    inputs:
      sourceFolder: 'build'
      contents: 'SignalFxAgent-*-win64.zip'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      cleanTargetFolder: true
      overWrite: true
      flattenFolders: true
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'bundle'

- job: 'win_2012_integration_tests'
  pool:
    vmImage: 'vs2015-win2012r2'
  dependsOn: 'win_bundle_build'
  steps:
  - template: 'templates/extract-bundle.yml'
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: '(windows or windows_only) and not deployment and not installer'
      options: '-n4'
      # Install IIS for windows-iis integration test.
      chocoPackages: '--source windowsfeatures IIS-WebServerRole'

- job: 'win_2016_integration_tests'
  pool:
    vmImage: 'vs2017-win2016'
  dependsOn: 'win_bundle_build'
  steps:
  - template: 'templates/extract-bundle.yml'
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: '(windows or windows_only) and not deployment and not installer'
      options: '-n4'
      # Install IIS for windows-iis integration test.
      chocoPackages: '--source windowsfeatures IIS-WebServerRole'

- job: 'win_2012_chef_tests'
  pool:
    vmImage: 'vs2015-win2012r2'
  steps:
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: 'chef and windows_only'
      changesInclude: 'deployments/chef tests/deployments/chef tests/packaging/common.py'

- job: 'win_2016_chef_tests'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: 'chef and windows_only'
      changesInclude: 'deployments/chef tests/deployments/chef tests/packaging/common.py'

- job: 'win_2012_puppet_tests'
  pool:
    vmImage: 'vs2015-win2012r2'
  steps:
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: 'puppet and windows_only'
      changesInclude: 'deployments/puppet tests/deployments/puppet tests/packaging/common.py'

- job: 'win_2016_puppet_tests'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: 'puppet and windows_only'
      changesInclude: 'deployments/puppet tests/deployments/puppet tests/packaging/common.py'

- job: 'win_2012_installer_tests'
  pool:
    vmImage: 'vs2015-win2012r2'
  steps:
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: 'installer and windows_only'
      changesInclude: 'deployments/installer tests/packaging'

- job: 'win_2016_installer_tests'
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - template: 'templates/run-pytest.yml'
    parameters:
      markers: 'installer and windows_only'
      changesInclude: 'deployments/installer tests/packaging'
