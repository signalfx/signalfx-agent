// Code generated by monitor-code-gen. DO NOT EDIT.

package docker

import (
	"github.com/signalfx/golib/v3/datapoint"
	"github.com/signalfx/signalfx-agent/pkg/monitors"
)

const monitorType = "collectd/docker"

const (
	groupBlkio   = "blkio"
	groupCPU     = "cpu"
	groupMemory  = "memory"
	groupNetwork = "network"
)

var groupSet = map[string]bool{
	groupBlkio:   true,
	groupCPU:     true,
	groupMemory:  true,
	groupNetwork: true,
}

const (
	blkioIoServiceBytesRecursiveAsync = "blkio.io_service_bytes_recursive.async"
	blkioIoServiceBytesRecursiveRead  = "blkio.io_service_bytes_recursive.read"
	blkioIoServiceBytesRecursiveSync  = "blkio.io_service_bytes_recursive.sync"
	blkioIoServiceBytesRecursiveTotal = "blkio.io_service_bytes_recursive.total"
	blkioIoServiceBytesRecursiveWrite = "blkio.io_service_bytes_recursive.write"
	cpuUsageKernelmode                = "cpu.usage.kernelmode"
	cpuUsageSystem                    = "cpu.usage.system"
	cpuUsageTotal                     = "cpu.usage.total"
	cpuUsageUsermode                  = "cpu.usage.usermode"
	memoryUsageLimit                  = "memory.usage.limit"
	memoryUsageMax                    = "memory.usage.max"
	memoryUsageTotal                  = "memory.usage.total"
	networkUsageRxBytes               = "network.usage.rx_bytes"
	networkUsageRxDropped             = "network.usage.rx_dropped"
	networkUsageRxErrors              = "network.usage.rx_errors"
	networkUsageRxPackets             = "network.usage.rx_packets"
	networkUsageTxBytes               = "network.usage.tx_bytes"
	networkUsageTxDropped             = "network.usage.tx_dropped"
	networkUsageTxErrors              = "network.usage.tx_errors"
	networkUsageTxPackets             = "network.usage.tx_packets"
)

var metricSet = map[string]monitors.MetricInfo{
	blkioIoServiceBytesRecursiveAsync: {Type: datapoint.Counter, Group: groupBlkio},
	blkioIoServiceBytesRecursiveRead:  {Type: datapoint.Counter, Group: groupBlkio},
	blkioIoServiceBytesRecursiveSync:  {Type: datapoint.Counter, Group: groupBlkio},
	blkioIoServiceBytesRecursiveTotal: {Type: datapoint.Counter, Group: groupBlkio},
	blkioIoServiceBytesRecursiveWrite: {Type: datapoint.Counter, Group: groupBlkio},
	cpuUsageKernelmode:                {Type: datapoint.Counter, Group: groupCPU},
	cpuUsageSystem:                    {Type: datapoint.Gauge, Group: groupCPU},
	cpuUsageTotal:                     {Type: datapoint.Gauge, Group: groupCPU},
	cpuUsageUsermode:                  {Type: datapoint.Counter, Group: groupCPU},
	memoryUsageLimit:                  {Type: datapoint.Gauge, Group: groupMemory},
	memoryUsageMax:                    {Type: datapoint.Gauge, Group: groupMemory},
	memoryUsageTotal:                  {Type: datapoint.Gauge, Group: groupMemory},
	networkUsageRxBytes:               {Type: datapoint.Counter, Group: groupNetwork},
	networkUsageRxDropped:             {Type: datapoint.Counter, Group: groupNetwork},
	networkUsageRxErrors:              {Type: datapoint.Counter, Group: groupNetwork},
	networkUsageRxPackets:             {Type: datapoint.Counter, Group: groupNetwork},
	networkUsageTxBytes:               {Type: datapoint.Counter, Group: groupNetwork},
	networkUsageTxDropped:             {Type: datapoint.Counter, Group: groupNetwork},
	networkUsageTxErrors:              {Type: datapoint.Counter, Group: groupNetwork},
	networkUsageTxPackets:             {Type: datapoint.Counter, Group: groupNetwork},
}

var defaultMetrics = map[string]bool{
	blkioIoServiceBytesRecursiveAsync: true,
	blkioIoServiceBytesRecursiveRead:  true,
	blkioIoServiceBytesRecursiveSync:  true,
	blkioIoServiceBytesRecursiveTotal: true,
	blkioIoServiceBytesRecursiveWrite: true,
	cpuUsageKernelmode:                true,
	cpuUsageSystem:                    true,
	cpuUsageTotal:                     true,
	cpuUsageUsermode:                  true,
	memoryUsageLimit:                  true,
	memoryUsageMax:                    true,
	memoryUsageTotal:                  true,
}

var groupMetricsMap = map[string][]string{
	groupBlkio: []string{
		blkioIoServiceBytesRecursiveAsync,
		blkioIoServiceBytesRecursiveRead,
		blkioIoServiceBytesRecursiveSync,
		blkioIoServiceBytesRecursiveTotal,
		blkioIoServiceBytesRecursiveWrite,
	},
	groupCPU: []string{
		cpuUsageKernelmode,
		cpuUsageSystem,
		cpuUsageTotal,
		cpuUsageUsermode,
	},
	groupMemory: []string{
		memoryUsageLimit,
		memoryUsageMax,
		memoryUsageTotal,
	},
	groupNetwork: []string{
		networkUsageRxBytes,
		networkUsageRxDropped,
		networkUsageRxErrors,
		networkUsageRxPackets,
		networkUsageTxBytes,
		networkUsageTxDropped,
		networkUsageTxErrors,
		networkUsageTxPackets,
	},
}

var monitorMetadata = monitors.Metadata{
	MonitorType:       "collectd/docker",
	DefaultMetrics:    defaultMetrics,
	Metrics:           metricSet,
	MetricsExhaustive: false,
	Groups:            groupSet,
	GroupMetricsMap:   groupMetricsMap,
	SendAll:           false,
}
