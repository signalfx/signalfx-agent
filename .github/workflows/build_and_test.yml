name: build_and_test

on: 
  push:
    tags: ['v[0-9]+.[0-9]+.[0-9]+']
    branches:
      - main
  pull_request:

concurrency:
  group: build_and_test-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RESULT_PATH: testresults
  PYTHON_VERSION: 3.8.10
  REQUIREMENTS_PATH: "tests/requirements.txt"

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Build image and bundle
        env:
          PULL_CACHE: yes
          AGENT_VERSION: latest
        run: |
          make bundle
          mkdir -p ./dist
          docker save -o ./dist/image.tar quay.io/signalfx/signalfx-agent-dev:latest
          mv signalfx-agent-latest.tar.gz ./dist/

      - name: Uploading image artifacts
        uses: actions/upload-artifact@v2
        with:
          name: image
          path: ./dist/image.tar

      - name: Uploading bundle artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bundle
          path: ./dist/signalfx-agent-latest.tar.gz

  bundle_tests:
    name: bundle_tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Downloading bundle
        uses: actions/download-artifact@v2
        with:
          name: bundle
          path: ./dist

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
          key: v1-pytest-${{ env.PYTHON_VERSION }}-${{ hashFiles(env.REQUIREMENTS_PATH) }}

      - name: Install pytest
        run: pip install -r "${{ env.REQUIREMENTS_PATH }}"

      - name: Run pytest
        env:
          WORKERS: 2
          PYTEST_OPTIONS: --test-bundle-path=./dist/signalfx-agent-latest.tar.gz
          TESTS_DIR: ./tests/packaging
          MARKERS: bundle
        run: .github/scripts/run-pytest.sh

      - name: Uploading pytest result artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bundle-package-pytest-result
          path: |
            ~/${{ env.RESULT_PATH }}/results.html
            ~/${{ env.RESULT_PATH }}/results.xml

  dependency_check:
    name: dependency_check
    runs-on: ubuntu-latest
    needs: [build]
    container:
      image: owasp/dependency-check:6.5.0
      options: --user root
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Downloading bundle
        uses: actions/download-artifact@v2
        with:
          name: bundle
          path: ./dist

      - name: Setup dependency check
        run: |
          mkdir -p ./bundle
          mkdir -p ./reports
          apk --no-cache add tar
          tar -C ./bundle -xf ./dist/signalfx-agent-latest.tar.gz

      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"

      - name: Caching dependency
        uses: actions/cache@v2
        with:
          path: |
            /usr/share/dependency-check/data
          key: v2-dependency-check-nvd-${{ steps.get-date.outputs.date }}-${{ hashFiles('./.github/workflows/build_and_test.yml') }}

      - name: Run Dependency Check
        run: |
          /usr/share/dependency-check/bin/dependency-check.sh \
            --scan ./bundle \
            --project "signalfx-agent-latest.tar.gz" \
            --suppression ./scripts/dependency-check/suppression.xml \
            --out ./reports/ \
            --format HTML \
            --format JUNIT \
            --junitFailOnCVSS 9 \
            --failOnCVSS 9 || \
            (echo -e "\nOne or more critical vulnerabilities were found in the agent bundle.\nCheck the report artifact, fix the issues, run 'make bundle && make dependency-check', and commit the changes when the issues are resolved." && exit 1)
      
      - name: Uploading test result artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dependency-check-result
          path: reports

  pcf_tile_build:
    name: pcf_tile_build
    runs-on: ubuntu-latest
    needs: [build]
    container:
      image: cfplatformeng/tile-generator:v14.0.3
    steps:
      - name: Installing git
        run: |
          apt-get update
          apt-get install -y git
      
      - name: Check out the codebase.
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Downloading bundle
        uses: actions/download-artifact@v2
        with:
          name: bundle
          path: ./dist

      - name: Run PCF tile build
        run: |
          AGENT_VERSION=$(./scripts/current-version) AGENT_BUNDLE=$(pwd)/dist/signalfx-agent-latest.tar.gz deployments/cloudfoundry/tile/make-latest-tile
      
      - name: Uploading PCF tile build result artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pcf-tile-build-result
          path: deployments/cloudfoundry/tile/product/signalfx-monitoring-*.pivotal

  integration_test:
    name: integration_test
    # Running on Ubuntu 18.04 as Collectd python plugin required version GLIBC_2.29 which is not available on ubuntu-latest (20.04)
    runs-on: ubuntu-18.04
    needs: [build]
    strategy:
      matrix:
        group: [1, 2, 3, 4]
      fail-fast: false
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Downloading bundle
        uses: actions/download-artifact@v2
        with:
          name: bundle
          path: ./

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Caching dependency
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
          key: v1-pytest-${{ env.PYTHON_VERSION }}-${{ hashFiles(env.REQUIREMENTS_PATH) }}

      - name: Install pytest
        run: pip install -r "${{ env.REQUIREMENTS_PATH }}"

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            openstack:
              - '**/openstack/**'
              - '**/make-devstack-image'
              - '**/run-devstack-image'
              - '**/devstack/**'
            conviva:
              - '**/conviva/**'
            jenkins:
              - '**/jenkins/**'
      - name: Setup integration test
        run: |
          export BUNDLE_DIR="$(pwd)/bundle"
          export TEST_SERVICES_DIR="$(pwd)/test-services"
          export AGENT_BIN="$BUNDLE_DIR/bin/signalfx-agent"
          
          tar -xf signalfx-agent-latest.tar.gz
          mv signalfx-agent $BUNDLE_DIR
          $BUNDLE_DIR/bin/patch-interpreter $BUNDLE_DIR
          [ -f "$AGENT_BIN" ] || (echo "$AGENT_BIN not found!" && exit 1)
          MARKERS="integration";
          if [ ${GITHUB_EVENT_NAME} != 'push' ] || [ ${GITHUB_REF##*/} != 'main' ]; then
            if [ ${{ steps.filter.outputs.openstack }} = 'false' ]; then
              MARKERS="$MARKERS and not openstack"
            fi
            if [ ${{ steps.filter.outputs.conviva }} = 'false' ]; then
              MARKERS="$MARKERS and not conviva"
            fi
            if [ ${{ steps.filter.outputs.jenkins }} = 'false' ]; then
              MARKERS="$MARKERS and not jenkins"
            fi
          fi
          echo "BUNDLE_DIR=$BUNDLE_DIR" >> $GITHUB_ENV
          echo "AGENT_BIN=$AGENT_BIN" >> $GITHUB_ENV
          echo "TEST_SERVICES_DIR=$TEST_SERVICES_DIR" >> $GITHUB_ENV
          echo "MARKERS=$MARKERS" >> $GITHUB_ENV
          echo "DEFAULT_TIMEOUT=120" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y --only-upgrade ca-certificates
      - name: Run pytest
        env:
          WORKERS: 2
          PYTEST_OPTIONS: --reruns 2
          TESTS_DIR: ./tests
          GITHUB_NODE_TOTAL: 4
          GITHUB_NODE_GROUP: ${{ matrix.group }}
        run: .github/scripts/run-pytest.sh

      - name: Uploading pytest result artifacts
        uses: actions/upload-artifact@v2
        with:
          name: integration-test-result-${{ matrix.group }}
          path: |
            ~/${{ env.RESULT_PATH }}/results.html
            ~/${{ env.RESULT_PATH }}/results.xml
