monitors:
- dimensions:
  doc: |
    This monitors an [HAProxy](http://www.haproxy.org/) instance.  Requires HAProxy 1.5+.

    <!--- SETUP --->
    ### Socket Config
    The location of the HAProxy socket file is defined in the HAProxy config file, as in the following example:

    ```
    global
        daemon
        stats socket /var/run/haproxy.sock
        stats timeout 2m
    ```

    Note: it is possible to use a tcp socket for stats in HAProxy. Users will
    first need to define in their collectd-haproxy plugin config file the tcp
    address for the socket, for example `localhost:9000`, and then in the
    haproxy.cfg file change the stats socket to listen on the same address
    ```
    global
        daemon
        stats socket localhost:9000
        stats timeout 2m
    ```

    For a more restricted tcp socket, a backend server can be defined to listen
    to stats on localhost. A frontend proxy can use the backend server on a
    different port, with ACLs to restrict access. See below for example.
    Depending on how restrictive your socket is, you may need to add the
    signalfx-agent user to the haproxy group:
    `sudo usermod -a -G haproxy signalfx-agent`

    ```
    global
        daemon
        stats socket localhost:9000
        stats timeout 2m

    backend stats-backend
        mode tcp
        server stats-localhost localhost:9000

    frontend stats-frontend
        bind *:9001
        default_backend stats-backend
        acl ...
        acl ...
    ```

    <!--- SETUP --->
    ### SELinux Setup

    If you have SELinux enabled, create a SELinux policy package downloading
    the [type enforcement
    file](https://github.com/signalfx/collectd-haproxy/blob/master/selinux/collectd-haproxy.te)
    to some place on your server.  Run the commands below to create and install
    the policy package.

        $ checkmodule -M -m -o collectd-haproxy.mod collectd-haproxy.te
        checkmodule:  loading policy configuration from collectd-haproxy.te
        checkmodule:  policy configuration loaded
        checkmodule:  writing binary representation (version 17) to collectd-haproxy.mod
        $ semodule_package -o collectd-haproxy.pp -m collectd-haproxy.mod
        $ sudo semodule -i collectd-haproxy.pp
        $ sudo reboot
  metrics:
    counter.connection_total:
      description: Cumulative number of connections (frontend). This corresponds to
        HAProxy's "conn_tot" metric.
      default: false
      type: counter
    counter.server_selected_total:
      description: Number of times a server was selected, either for new sessions
        or when re-dispatching. This corresponds to HAProxy's "lbtot" metric.
      default: true
      type: counter
    derive.bytes_in:
      description: Corresponds to HAProxy's `bin` metric -  Bytes in
      default: true
      type: cumulative
    derive.bytes_out:
      description: Corresponds to HAProxy's `bout` metric -  Bytes out
      default: true
      type: cumulative
    derive.cli_abrt:
      description: Corresponds to HAProxy's `cli_abrt` metric -  Number of data transfers
        aborted by the client
      default: false
      type: cumulative
    derive.comp_byp:
      description: Corresponds to HAProxy's `comp_byp` metric -  Number of bytes that
        bypassed the HTTP compressor (CPU/BW limit)
      default: false
      type: cumulative
    derive.comp_in:
      description: Corresponds to HAProxy's `comp_in` metric -  Number of HTTP response
        bytes fed to the compressor
      default: false
      type: cumulative
    derive.comp_out:
      description: Corresponds to HAProxy's `comp_out` metric -  Number of HTTP response
        bytes emitted by the compressor
      default: false
      type: cumulative
    derive.comp_rsp:
      description: Corresponds to HAProxy's `comp_rsp` metric -  Number of HTTP responses
        that were compressed
      default: false
      type: cumulative
    derive.compress_bps_in:
      description: Corresponds to HAProxy's `CompressBpsIn` metric.
      default: false
      type: cumulative
    derive.compress_bps_out:
      description: Corresponds to HAProxy's `CompressBpsOut` metric.
      default: false
      type: cumulative
    derive.connections:
      description: Corresponds to HAProxy's `CumConns` metric. Cumulative number of
        connections.
      default: false
      type: cumulative
    derive.denied_request:
      description: Corresponds to HAProxy's `dreq` metric -  Requests denied because
        of security concerns. - For tcp this is because of a matched tcp-request content
        rule.
      default: true
      type: cumulative
    derive.denied_response:
      description: Corresponds to HAProxy's `dresp` metric -  Responses denied because
        of security concerns. - For http this is because of a matched http-request
        rule, or
      default: true
      type: cumulative
    derive.downtime:
      description: Corresponds to HAProxy's `downtime` metric -  Total downtime (in
        seconds). The value for the backend is the downtime for the whole backend,
        not the sum of the server downtime.
      default: false
      type: cumulative
    derive.error_connection:
      description: Corresponds to HAProxy's `econ` metric -  Number of requests that
        encountered an error trying to connect to a backend server. The backend stat
        is the sum of the stat
      default: true
      type: cumulative
    derive.error_request:
      description: Corresponds to HAProxy's `ereq` metric -  Request errors.
      default: true
      type: cumulative
    derive.error_response:
      description: Corresponds to HAProxy's `eresp` metric -  Response errors. srv_abrt
        will be counted here also. Responses denied because of security concerns.
      default: true
      type: cumulative
    derive.failed_checks:
      description: Corresponds to HAProxy's `chkfail` metric -  Number of failed checks.
        (Only counts checks failed when the server is up.)
      default: false
      type: cumulative
    derive.redispatched:
      description: Corresponds to HAProxy's `wredis` metric -  Number of times a request
        was redispatched to another server. The server value counts the number of
        times that server was
      default: true
      type: cumulative
    derive.request_total:
      description: Corresponds to HAProxy's `req_tot` metric -  Total number of HTTP
        requests received
      default: false
      type: cumulative
    derive.requests:
      description: Corresponds to HAProxy's `CumReq` metric.
      default: true
      type: cumulative
    derive.response_1xx:
      description: Corresponds to HAProxy's `hrsp_1xx` metric -  Http responses with
        1xx code
      default: false
      type: cumulative
    derive.response_2xx:
      description: Corresponds to HAProxy's `hrsp_2xx` metric -  Http responses with
        2xx code
      default: true
      type: cumulative
    derive.response_3xx:
      description: Corresponds to HAProxy's `hrsp_3xx` metric -  Http responses with
        3xx code
      default: false
      type: cumulative
    derive.response_4xx:
      description: Corresponds to HAProxy's `hrsp_4xx` metric -  Http responses with
        4xx code
      default: true
      type: cumulative
    derive.response_5xx:
      description: Corresponds to HAProxy's `hrsp_5xx` metric -  Http responses with
        5xx code
      default: true
      type: cumulative
    derive.response_other:
      description: Corresponds to HAProxy's `hrsp_other` metric -  Http responses
        with other codes (protocol error)
      default: false
      type: cumulative
    derive.retries:
      description: Corresponds to HAProxy's `wretr` metric -  Number of times a connection
        to a server was retried.
      default: true
      type: cumulative
    derive.session_total:
      description: Corresponds to HAProxy's `stot` metric -  Cumulative number of
        connections
      default: false
      type: cumulative
    derive.srv_abrt:
      description: Corresponds to HAProxy's `srv_abrt` metric -  Number of data transfers
        aborted by the server (inc. in eresp)
      default: false
      type: cumulative
    derive.ssl_cache_lookups:
      description: Corresponds to HAProxy's `SslCacheLookups` metric.
      default: false
      type: cumulative
    derive.ssl_cache_misses:
      description: Corresponds to HAProxy's `SslCacheMisses` metric.
      default: false
      type: cumulative
    derive.ssl_connections:
      description: Corresponds to HAProxy's `CumSslConns` metric.
      default: false
      type: cumulative
    derive.uptime_seconds:
      description: Corresponds to HAProxy's `Uptime_sec` metric.
      default: false
      type: cumulative
    gauge.active_servers:
      description: Number of active servers. This corresponds to HAProxy's "act" metric.
      default: false
      type: gauge
    gauge.backup_servers:
      description: Number of backup servers. This corresponds to HAProxy's "bck" metric.
      default: false
      type: gauge
    gauge.check_duration:
      description: Time in ms took to finish to last health check. This corresponds
        to HAProxy's "check_duration" metric.
      default: false
      type: gauge
    gauge.connection_rate:
      description: Number of connections over the last elapsed second (frontend).
        This corresponds to HAProxy's "conn_rate" metric.
      default: true
      type: gauge
    gauge.connection_rate_max:
      description: Highest known connection rate. This corresponds to HAProxy's "conn_rate_max"
        metric.
      default: false
      type: gauge
    gauge.current_connections:
      description: Current number of connections. Corresponds to HAProxy's `CurrConns`
        metric.
      default: false
      type: gauge
    gauge.current_ssl_connections:
      description: Corresponds to HAProxy's `CurrSslConns` metric.
      default: false
      type: gauge
    gauge.denied_tcp_connections:
      description: Requests denied by 'tcp-request connection' rules. This corresponds
        to HAProxy's "dcon" metric.
      default: false
      type: gauge
    gauge.denied_tcp_sessions:
      description: Requests denied by 'tcp-request session' rules. This corresponds
        to HAProxy's "dses" metric.
      default: false
      type: gauge
    gauge.idle_pct:
      description: Corresponds to HAProxy's "Idle_pct" metric. Ratio of system polling
        time versus total time.
      default: true
      type: gauge
    gauge.intercepted_requests:
      description: Cumulative number of intercepted requests, corresponds to HAProxys
        metric 'intercepted'
      default: false
      type: gauge
    gauge.last_session:
      description: Number of seconds since last session was assigned to server/backend.
        This corresponds to HAProxy's "lastsess" metric.
      default: false
      type: gauge
    gauge.max_connection_rate:
      description: Corresponds to HAProxy's `MaxConnRate` metric.
      default: false
      type: gauge
    gauge.max_connections:
      description: Corresponds to HAProxy's `MaxConn` metric.
      default: false
      type: gauge
    gauge.max_pipes:
      description: Corresponds to HAProxy's `MaxPipes` metric.
      default: false
      type: gauge
    gauge.max_session_rate:
      description: Corresponds to HAProxy's `MaxSessRate` metric.
      default: false
      type: gauge
    gauge.max_ssl_connections:
      description: Corresponds to HAProxy's `MaxSslConns` metric.
      default: false
      type: gauge
    gauge.pipes_free:
      description: Corresponds to HAProxy's `PipesFree` metric.
      default: false
      type: gauge
    gauge.pipes_used:
      description: Corresponds to HAProxy's `PipesUsed` metric.
      default: false
      type: gauge
    gauge.queue_current:
      description: Corresponds to HAProxy's `qcur` metric -  Current queued requests.
        For the backend this reports the number queued without a server assigned.
      default: true
      type: gauge
    gauge.queue_limit:
      description: Configured max queue for the server, 0 being no limit. Corresponds
        to HAProxy's "qlimit" metric.
      default: false
      type: gauge
    gauge.queue_max:
      description: Max number of queued requests, queue_current, corresponds to HAProxy's
        'qmax' metric.
      default: false
      type: gauge
    gauge.request_rate:
      description: Corresponds to HAProxy's `req_rate` metric -  HTTP requests per
        second over last elapsed second
      default: true
      type: gauge
    gauge.request_rate_max:
      description: Max number of HTTP requests per second observed. Corresponds to
        HAProxy's "req_rate_max" metric.
      default: false
      type: gauge
    gauge.run_queue:
      description: Corresponds to HAProxy's `Run_queue` metric.
      default: false
      type: gauge
    gauge.session_current:
      description: Corresponds to HAProxy's `scur` metric -  Current sessions
      default: true
      type: gauge
    gauge.session_rate:
      description: Corresponds to HAProxy's `rate` metric -  Number of sessions per
        second over last elapsed second
      default: true
      type: gauge
    gauge.session_rate_limit:
      description: Configured limit on number of new sessions per second. Corresponds
        to HAProxy's "rate_lim" metric.
      default: false
      type: gauge
    gauge.session_rate_max:
      description: Max number of new sessions per second
      default: false
      type: gauge
    gauge.session_rate_all:
      default: true
      type: gauge
    gauge.session_time_average:
      description: Average total session time in ms over the last 1024 requests. Corresponds
        to HAProxy's "ttime" metric.
      default: false
      type: gauge
    gauge.response_time_avg:
      description: Average total session time in ms over the last 1024 requests. Corresponds
        to HAProxy's "ttime" metric.
      default: true
      type: gauge
    gauge.ssl_backend_key_rate:
      description: Corresponds to HAProxy's `SslBackendKeyRate` metric.
      default: false
      type: gauge
    gauge.ssl_frontend_key_rate:
      description: Corresponds to HAProxy's `SslFrontendKeyRate` metric.
      default: false
      type: gauge
    gauge.ssl_rate:
      description: Corresponds to HAProxy's `SslRate` metric.
      default: false
      type: gauge
    gauge.tasks:
      description: Corresponds to HAProxy's `Tasks` metric.
      default: false
      type: gauge
    gauge.throttle:
      description: Corresponds to HAProxy's `throttle` metric -  Current throttle
        percentage for the server, when slowstart is active, or no value if not in
        slowstart.
      default: false
      type: gauge
    gauge.zlib_mem_usage:
      description: Corresponds to HAProxy's `ZlibMemUsage` metric.
      default: false
      type: gauge
    gauge.session_time_avg:
      default: true
      type: gauge
    gauge.queue_time_avg:
      default: true
      type: gauge
  monitorType: collectd/haproxy
  properties:
