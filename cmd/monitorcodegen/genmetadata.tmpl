// Code generated by monitor-code-gen. DO NOT EDIT.

package {{.goPackage}}

import (
{{if .metrics}}
	"github.com/signalfx/golib/datapoint"
{{- end}}
	"github.com/signalfx/signalfx-agent/internal/monitors"
)

{{if (len .monitors) eq 1 }}
const {{"monitorType" | formatVariable}} = "{{(index .monitors 0).MonitorType}}"
{{end}}

{{with .groupMetricsMap}}
const (
{{- range $group, $metrics := . }}
	{{(printf "group.%s" $group) | formatVariable}} = "{{$group}}"
{{- end}}
)
{{end}}

var {{"groupSet" | formatVariable}} = map[string]bool {
{{- range $group, $metrics := .groupMetricsMap}}
	{{(printf "group.%s" $group) | formatVariable}}: true,
{{- end}}
}

{{with .metrics}}
const (
{{- range $metric, $info := .}}
	{{- if $info.Name}}
		{{$metric | formatVariable}} = "{{$info.Name}}"
	{{- else}}
		{{$metric | formatVariable}} = "{{$metric}}"
	{{- end}}
{{- with $info.Alias}}
	{{. | formatVariable}} = "{{.}}"
{{- end}}
{{- end}}
)
{{end}}

var {{"metricSet" | formatVariable}} = map[string]monitors.MetricInfo {
{{- range $metric, $info := .metrics}}
	{{$metric | formatVariable}}: { Type: {{- $info.Type | convertMetricType -}},
	{{- if $info.Group -}}
		Group: {{- $info.Group | deref | printf "group.%s" | formatVariable -}},
	{{- end -}}
	{{- if $info.Dimensions -}}
		Dimensions: map[string]string{
			{{- range $info.Dimensions -}}
			"{{.Key}}": "{{.Val}}",
			{{- end -}}
		},
	{{- end -}}
	},
{{- end}}
}

var {{"defaultMetrics" | formatVariable}} = map[string]bool {
{{- range $metric, $info := .metrics}}
{{- if $info.Default}}
	{{$metric | formatVariable}}: true,
{{- with $info.Alias}}
	{{. | formatVariable}}: true,
{{- end}}
{{- end}}
{{- end}}
}

var {{"groupMetricsMap" | formatVariable}} = map[string][]string {
{{- range $group, $metrics := .groupMetricsMap}}
	{{(printf "group.%s" $group) | formatVariable}}: []string {
		{{- range $metrics}}
		{{. | formatVariable}},
		{{- end}}
	},
{{- end}}
}

{{- $keys := newStringSlice -}}
{{- range $metric, $info := .metrics}}
    {{- range $info.Aliases}}
        {{- $keys = appendString $keys .Key -}}
    {{- end}}
{{- end}}
{{if gt (len $keys) 0 -}}
// Map keys and value types for metric aliases.
type (
	Metric string
	Key string
)
// Map keys for metric aliases.
{{- range $key := uniqueStrings $keys}}
    const {{$key | formatVariable}} = Key("{{$key}}")
{{- end}}
{{with .metrics}}
var {{"aliases" | formatVariable}} = map[Metric]map[Key]string {
    {{- range $metric, $info := .}}
        {{- if $info.Aliases}}
            {{$metric | formatVariable}}: {
                {{- range $info.Aliases}}
                    {{.Key | formatVariable}}: "{{.Val}}",
                {{- end}}
            },
        {{- end}}
    {{- end}}
}
{{end}}
{{end}}

{{range .monitors}}
var {{if gt (len $.monitors) 1 -}}
{{- (printf "%s.%s" .MonitorType "monitorMetadata") | formatVariable -}}
{{else -}}
{{"monitorMetadata" | formatVariable}}{{end}} = monitors.Metadata{
	MonitorType: "{{.MonitorType}}",
	DefaultMetrics: {{"defaultMetrics" | formatVariable}},
	Metrics: {{"metricSet" | formatVariable}},
	MetricsExhaustive: {{.MetricsExhaustive}},
	Groups: {{"groupSet" | formatVariable}},
	GroupMetricsMap: {{"groupMetricsMap" | formatVariable}},
	SendAll: {{ .SendAll }},
}
{{end}}